<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lazy Blog</title>
  
  
  <link href="https://lazyo.gitee.io/atom.xml" rel="self"/>
  
  <link href="https://lazyo.gitee.io/"/>
  <updated>2022-06-18T14:25:15.844Z</updated>
  <id>https://lazyo.gitee.io/</id>
  
  <author>
    <name>Lazy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>博客项目-小问题总结</title>
    <link href="https://lazyo.gitee.io/p/76409858/"/>
    <id>https://lazyo.gitee.io/p/76409858/</id>
    <published>2022-06-15T13:54:59.000Z</published>
    <updated>2022-06-18T14:25:15.844Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mapper"><a href="#Mapper" class="headerlink" title="Mapper"></a>Mapper</h1><p>下面的这段代码，用了一个<code>where</code>块里面跟着<code>if</code>，那么，后面的<code>AND</code>开始的地方，可以写在外面，以普通的查询来做吗？<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listComments&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;priv.lazy.myblog.dto.CommentDTO&quot;</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">            u.nickname,</span><br><span class="line">            u.avatar,</span><br><span class="line">            u.web_site,</span><br><span class="line">            c.user_id,</span><br><span class="line">            c.id,</span><br><span class="line">            c.comment_content,</span><br><span class="line">            c.create_time</span><br><span class="line">        FROM</span><br><span class="line">            tb_comment c</span><br><span class="line">                JOIN tb_user_info u ON u.id = c.user_id</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;commentVO.topicId != null&quot;</span>&gt;</span></span><br><span class="line">                topicId = #&#123;commentVO.topicId&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            AND type = #&#123;commentVO.type&#125;</span><br><span class="line">            AND c.is_review = 1</span><br><span class="line">            AND parent_id IS NULL</span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">        ORDER BY</span><br><span class="line">        c.id DESC LIMIT #&#123;current&#125;,#&#123;size&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="sql解读"><a href="#sql解读" class="headerlink" title="sql解读"></a>sql解读</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listReplies&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;priv.lazy.myblog.dto.ReplyDTO&quot;</span>&gt;</span></span><br><span class="line">SELECT</span><br><span class="line">* </span><br><span class="line">FROM</span><br><span class="line">(</span><br><span class="line">SELECT</span><br><span class="line">c.user_id,</span><br><span class="line">u.nickname,</span><br><span class="line">u.avatar,</span><br><span class="line">u.web_site,</span><br><span class="line">c.reply_user_id,</span><br><span class="line">r.nickname AS reply_nickname,</span><br><span class="line">r.web_site AS reply_web_site,</span><br><span class="line">c.id,</span><br><span class="line">c.parent_id,</span><br><span class="line">c.comment_content,</span><br><span class="line">c.create_time,</span><br><span class="line">row_number () over ( PARTITION BY parent_id ORDER BY create_time ASC ) row_num </span><br><span class="line">FROM</span><br><span class="line">tb_comment c</span><br><span class="line">JOIN tb_user_info u ON c.user_id = u.id</span><br><span class="line">JOIN tb_user_info r ON c.reply_user_id = r.id </span><br><span class="line">WHERE</span><br><span class="line">c.is_review = 1 </span><br><span class="line">AND parent_id IN (</span><br><span class="line">         <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;commentIdList&quot;</span> <span class="attr">item</span>=<span class="string">&quot;commentId&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">             #&#123;commentId&#125;</span><br><span class="line">         <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">         )</span><br><span class="line">) t </span><br><span class="line">WHERE</span><br><span class="line">4 &gt; row_num</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><ul><li><p><code>Objects.nonNull(value)</code> 和<code>value != null</code>有啥区别？</p><p>  其实是一回事…</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">nonNull</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> obj != <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">博客项目中一些不懂的小的知识点记录</summary>
    
    
    
    
    <category term="项目" scheme="https://lazyo.gitee.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="总结" scheme="https://lazyo.gitee.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>博客运行功能</title>
    <link href="https://lazyo.gitee.io/p/1416492683/"/>
    <id>https://lazyo.gitee.io/p/1416492683/</id>
    <published>2022-06-11T09:48:19.000Z</published>
    <updated>2022-06-11T12:46:14.080Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="70e34230c28cbe3bce829e8a9eaa0857476dda109c05e25ca35bbdc1b62bcdc8">b6bc2a15b97ace701a14f9e1ad104e8ff3c017c795c756911bbdd49f9c631e942b8147d74643df57f95918efa35ae0dbb2c4c6956d0eaa5ec6f1152103c241875d988abee22f7b5c58109abe3cae098ea96c2c598787f446d5421182ffaa5fdfafa47d57b5a2f21782b43c44eb80cd1b970764a0485d75a013fb5ff5efb629078ee617551a9a5ea625a5a7a87f7dddae6abdf536efd2d0fdff1b47477f5c9b6be3b95942f561a9e91b9fe85bbff74f0584ed15834378d743f4bc80cce44494ce5a08770c8291042ad462e6279724be57f5c68e06a52e10f81d4c063525a12eeb15ff226610ca8de07952e6da0da5eb20eaca3b88652b93dd8ae9c50d909c91ec95abf427296586c4f82b6fe0a61c46e04ac6e113b953a3a82d04379351b435688c5577b4cae5a7b437abeddd2e880e235ef67d3582d7db999f0f0ae098396b55bc9c05d0f02a5cd4f1be15fd1e29cdfb5577e7d3fa35b25ba26725a45fff43b7c4c133947e2e3384ae26a49095923b3e6cf44f3608673adba7038dc9715a644127b8d4996197c512b4bfacd5327dcd1bd42905026bbca66bd2198c76985eaa3264aa03d224e227199f10912c1d5b987cbbef5dad1e5305462ddaa16da72e323e7e2ca0f34b97a3382dcd827b7a29f900dfa4cd7a1a3ca16a885de7784d33b73464de0682d486a000c32d04616c915284605927667a4f73d95baf925479c328cc94daa059f7e7e04d683e84b3e31e25a9b494a503bbbe9d575dd617297e51461d6eff7aa2f09f600d93d7caf90e06214331b6fb90a262190268d207674c9f72e62c2a30b67096c5ca9e98a567c6924bf49471d8dabbd37a90547458abe0f746bb69ba771c573067995f0fa6d3f832124da8cbed3ca0aef9d8f11a9a487ce04d8049a0c6aef4b224b308c33d08e2142e6f738a6ef83732b0f7c34e1df08ab16976ab70f8e975dca69d44ab58a25cd299080f194608ceb7a0d14cefe967c1cf1887e10d69498a7aa5257d91ac95b39b08440dae226373a2d3a4d3aac6136e4bc955fc4a0e9d5c1f1735496fe4e186b814107cf2bf657d43c26034902f69e0b38195e80344b34d94daa91a0261c44deaa28b5914f55b9e10a000028e499c37523d8e1f1574b7b17418bc5f0c2d686255c8a3756fcc928ed8b250f740c2e459dd015ab81c63b05eb31618be481a4885f7d043d0e4b5f01f0323942476c1e009b59a0c4c6cdd9043fe5316872ccf054647f59a8a6cb36525d5ee075b8f9c1cf2c8709467de93705b900077cce0d7660f5342db31c36df80f18317567aa9c618ee0fb6c199292a650ae08fe30fc4fa5a161a6d2d3fa21565e6d7a99850e5bdcedc99480dc75f08f5a1888dc02dde1383efd355802161189a80efdd6fedf41fa2b3c127656dfc7226ddd480247661e605476c588693776dcf9887448903f7ad53d8d5af29dc00211a2225b4170c087de0492b3e652cdef4b310dffa424799c9394911189e13110b0d27daa052a452318089161105bd6b9ced9b45d6c3704b5a6d72a6db926628246f42830e9e29ffb5653bd51d1aabc7eaf2f7891695227a2d38612883fff6671e931c62a450572088a16dfece54dc6edc8625c47b3a24a2f0bd449da00e85df2c347650c7f5d7b9e7d4785e4fa09d135e147ff9acf72066169e073c97da8d0aa928fb476763d30d776bbdc756767ca766e61894704c1132fe5fc146d52b1281c8059047f7f2967df1a6d2ffcc162c2093b9b32dcd12b1fdd384bdb15987b8b65caca6afd75774aa762e50803d233f8578d52b4b4353e9d7ea5d29428c319498f481c36e3a5c8c9bffcc980cde664a576fdf2479ae6b2602324ff08800845a7e5177ec6aee0ac8e2e73d08a2302225b0ff8b7a42dd68c6c13ac2f1902763506b43bee13d59f1036f2832717beb617cb7cb51c2af415bf766462cd6487966609d7fe3a56e0b05cac67969468658e3e10db54a9c3e2d552413437e3c9f9479354700f5c6bb34ee1b5771657983f30f520dd4e6727127f859054fb1930300c143f0518df840bab9ea23627034539d369e765539724574260e8758a6ca48620a82e06f294dac85de70f2b0b345404970d9a148f824b3ea98ffa16e45dd7ebaa4582ff21ac972634e29aa49dc81a0ab700718b9a85aae0dc34766dd32381cb146b3a63fb77c07b8f4887207931a928aea2561d49c58ca7b4e55c76b1d6390e78e2784b6c410c103f1a3596491f706fb9315f15cdab628515e61eb5e9ccf74cd6de793a60399ed4a366a293e60b72a1288287279403bdce9a108943169264086c280ce9c68e5293c027ea49fb1b993c6f734f20de850f711bbbffe263a7cea73389b0d422d38b93d55fb08bbc75168c35800874f9af9793fcf9a92b82a715dc7dc0e23f6e064f22d95e75fb82eed632c1a032e40f5a566726d5d1c7210b155edfc3c163f6d5d0966fbd1bf7210debd3444f315822aadde0d9f4f7513d0f37e7ba1722ab28a61b3d74f9bf06a41b515e107fb60c28028973c5ebd1330ebb6b0d05cdc2276c512faa2b89a4b702671a4a54a8847fa5b62694a022acff2057f4aad376c7499de20706180fa7e004bc956e3b936755a0baaab85de878f66b38f8b68cd546db4dd47778d87dbe5814b8e0ea802673537775c9ed6573f45b43c3021361ac2966f365638232860608e74f2b3527df6f320131e65efd8993448723ca239e13ff2c651966a6358822e290b46be6285400a0d491587b066f4602f69685b01891733f4d431498d1c9e271df69ab97b1ea14ba22e8c01be0c25d7ad95ff7f0986d4d3e792d4873b6bf9f36dec8a66158f6ec20f6f1885ba0c4e194246d1aa0fd76af9ae423c28c1985776e3577ebff2668a2b58fdbff10dae0e467eb4c8ec67943f37353fc546e0f0e6165f27f401ed339fe8b700a210a22e89949d920364ed24aa5b9773f1bc17959fe3fd6742e2afb014c4284aa7798dcdf1f055468eae7172ae1b54253fbf56313edc59adedc05a033d26b311852f8ca55b86fc7a95b555c9215cf556ed30a69b7a842459fc0266000d94f930ff87199b8f89410cb887080346d784286d463abde9a1a445720373ea64de0fcf6b8f1733ee2d4fb221a0dd6400a7ebf9187ce56fe7fd13b6a180e3df49360805907ee5fc0f85282366e56587711d59c44705c7e6ad9a9bd9103de95dbbed94edcb79d2294e9de27ef70c029e7166f82e8775b8bc61f370634b575ed5f3d5d9616094aed643fea14fec2a6a90f53715df1f41e0dccaf5bc784395212695938ca7cf495afa34ce9265ded56d0df13144582c400003fc689741c351b9d06df69ba9251936d06c6cc525ce0b14e8282ec669dfae2e063d951d0685d15b5bb696082c5e36f1663e3b6cad942dcf1</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>一些转载文章的链接</title>
    <link href="https://lazyo.gitee.io/p/2919487292/"/>
    <id>https://lazyo.gitee.io/p/2919487292/</id>
    <published>2022-06-11T03:50:12.000Z</published>
    <updated>2022-06-28T12:38:20.898Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h2 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h2><h3 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h3><ul><li><a href="https://blog.csdn.net/u010445301/article/details/111322569">史上最全ThreadLocal 详解（一）</a></li></ul><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><h2 id="PostContrust注解"><a href="#PostContrust注解" class="headerlink" title="@PostContrust注解"></a>@PostContrust注解</h2><ul><li><a href="https://hello.blog.csdn.net/article/details/117433885">@PostConstruct注解是Spring提供的？今天讲点不一样的</a></li></ul><h1 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h1><h2 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h2><ul><li><a href="https://cloud.tencent.com/developer/article/1661866">SpringSecurity + JWT，从入门到精通</a></li></ul><h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><h2 id="resultMap"><a href="#resultMap" class="headerlink" title="resultMap"></a>resultMap</h2><ul><li><a href="https://www.cnblogs.com/kenhome/p/7764398.html">Mybatis：resultMap的使用总结</a></li><li><a href="https://juejin.cn/post/6844903858477481992">Mybatis中强大的resultMap</a></li></ul><h2 id="Spring-Security"><a href="#Spring-Security" class="headerlink" title="Spring Security"></a>Spring Security</h2><h3 id="AuthenticationEntryPoint"><a href="#AuthenticationEntryPoint" class="headerlink" title="AuthenticationEntryPoint"></a>AuthenticationEntryPoint</h3><ul><li>AuthenticationEntryPoint 用来解决匿名用户访问无权限资源时的异常</li></ul>]]></content>
    
    
    <summary type="html">从零开始做一个项目，期间涉及到的各种应该掌握的知识点。如果每个点都单独弄成文章的话会有很多，而且文章还几乎都从网上复制的，干脆整个链接合集。</summary>
    
    
    
    <category term="项目" scheme="https://lazyo.gitee.io/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="总结" scheme="https://lazyo.gitee.io/categories/%E9%A1%B9%E7%9B%AE/%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>MyBatis-Plus的BaseMapper与Iservice</title>
    <link href="https://lazyo.gitee.io/p/1688326964/"/>
    <id>https://lazyo.gitee.io/p/1688326964/</id>
    <published>2022-06-10T14:26:18.000Z</published>
    <updated>2022-06-11T12:46:14.073Z</updated>
    
    <content type="html"><![CDATA[<h1 id="讲解1"><a href="#讲解1" class="headerlink" title="讲解1"></a>讲解1</h1><p>熟悉 mybatis-plus 的人都知道，mybatis-plus 提供两种包含预定义增删改查操作的接口：</p><ul><li>com.baomidou.mybatisplus.core.mapper.BaseMapper</li><li>com.baomidou.mybatisplus.extension.service.IService</li></ul><p>Mybatis-plus提供了2个接口1个类：</p><ul><li>BaseMapper 针对dao层的方法封装 CRUD</li><li>IService<M,T> 针对业务逻辑层的封装 需要指定Dao层类和对应的实体类 是在BaseMapper基础上的加强</M,T></li><li>ServiceImpl 针对业务逻辑层的实现</li><li>两者提供的方法略有不同<br>对比这两个接口，操作都差不多，名字有一点点改变，比如 BaseMapper 里面叫 insert() 的方法，在 IService 里面叫 save()。<br>其实我也不是很清楚为什么要单独设计 IService 接口，但是两者确实有区别，就是 IService 提供批处理操作，BaseMapper 没有。</li></ul><p>IService是对BaseMapper的扩展<br>另外，IService 的默认实现 com.baomidou.mybatisplus.extension.service.impl.ServiceImpl 就是调用 BaseMapper 来操作数据库，所以我猜 IService 是 Java 8 之前对 BaseMapper 所做的扩展，而 Java 8 之后，因为有了 default 方法，ServiceImpl 里面的东西其实都可以移到 BaseMapper 里面了。<br>除此之外还有就是 IService 依赖于 Spring 容器，而 BaseMapper 不依赖；BaseMapper 可以继承并添加新的数据库操作，IService 要扩展的话还是得调用 Mapper，显得有些多此一举。</p><p>所以，如果你既要使用批处理操作，又要添加自己的数据库操作，那就必须两个接口一起用。</p><h1 id="讲解2"><a href="#讲解2" class="headerlink" title="讲解2"></a>讲解2</h1><blockquote><p>原文链接： <a href="https://www.yisu.com/zixun/314767.html">mybatis-plus中Service和Mapper的区别</a></p></blockquote><p>在后端开发过程中，如果有用到mybatis-plus，肯定会发现在其内部存在着两种数据库操作接口，Iservice和BaseMapper，如果只是用增删改查会发现两者的功能是一致的，除了方法名称有所不同，其他的基本相似。对此，我颇为好奇，便打开两个接口的源码进行对比。</p><p>先演示一下基本开发中的继承关系，手动创建的Service继承于ServiceImpl，并加载自己创建的Mapper<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestDeptService</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;RestDeptMapper, RestDept&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestDeptMapper restDeptMapper;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RestDeptMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;RestDept&gt; &#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如上，就是一般开发的基本模版代码，足以满足各种需求功能，但点开源码时，便进入新世界的大门。先看一下继承结构</p><p><img src="/p/1688326964/继承结构.png" alt="继承结构"></p><p>这样看，是不是很神奇，我们继承的ServiceImpl依旧实现了BaseMapper接口和Iservice接口，这就感觉有点啰嗦了，明明我们单独写了RestDeptMapper，并且继承了BaseMapper，现在ServiceImpl还是实现了BaseMapper，那我直接一个Service用下来不就行了，创建两套类，功能相似，还容易混乱，代码结构冗余。</p><p>本着“存在即合理”的理念，我们对比一下两个接口的方法。</p><p><img src="/p/1688326964/方法对比.png" alt="方法对比"></p><p>果然，Service简直是BaseMapper的大扩充，不但包含了所有基本方法，还加入了很多批处理功能，我们可以看一下官网对这两种接口的说明。</p><p>官网链接：<a href="https://mp.baomidou.com/guide/crud-interface.html">https://mp.baomidou.com/guide/crud-interface.html</a></p><h2 id="Service-CRUD-接口"><a href="#Service-CRUD-接口" class="headerlink" title="Service CRUD 接口"></a>Service CRUD 接口</h2><ul><li>通用<code>Service CRUD</code>封装IService接口，进一步封装 CRUD 采用<code>get 查询单行`` remove 删除`` list 查询集合`` page 分页</code> 前缀命名方式区分<code>Mapper</code>层避免混淆，</li><li>泛型<code>T</code>为任意实体对象</li><li>建议如果存在自定义通用<code>Service</code>方法的可能，请创建自己的<code>IBaseService</code>继承 <code>Mybatis-Plus</code>提供的基类</li><li>对象<code>Wrapper</code>为条件构造器</li></ul><h2 id="Mapper-CRUD-接口"><a href="#Mapper-CRUD-接口" class="headerlink" title="Mapper CRUD 接口"></a>Mapper CRUD 接口</h2><ul><li>通用 CRUD 封装BaseMapper接口，为<code>Mybatis-Plus</code>启动时自动解析实体表关系映射转换为 Mybatis 内部对象注入容器</li><li>泛型<code>T</code>为任意实体对象</li><li>参数<code>Serializable</code>为任意类型主键<code>Mybatis-Plus</code>不推荐使用复合主键约定每一张表都有自己的唯一 id 主键</li><li>对象<code>Wrapper</code> 为条件构造器</li></ul><p>最后本文还是比较水的，只是简单的看了一下结构而已，没有太多的深入，总结一下，以我平时粘贴复制的经验来看，Service虽然加入了数据库的操作，但还是以业务功能为主，而更加复杂的SQL查询，还是要靠Mapper对应的XML文件里去编写SQL语句。</p><h2 id="MyBatis-Plus-BaseMapper和IService使用手册"><a href="#MyBatis-Plus-BaseMapper和IService使用手册" class="headerlink" title="MyBatis-Plus BaseMapper和IService使用手册"></a>MyBatis-Plus BaseMapper和IService使用手册</h2><p><a href="https://www.cnblogs.com/andea/p/11601367.html">https://www.cnblogs.com/andea/p/11601367.html</a></p>]]></content>
    
    
    <summary type="html">网上找的讲解</summary>
    
    
    
    <category term="项目" scheme="https://lazyo.gitee.io/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="知识点总结" scheme="https://lazyo.gitee.io/categories/%E9%A1%B9%E7%9B%AE/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="MyBatis-Plus" scheme="https://lazyo.gitee.io/tags/MyBatis-Plus/"/>
    
  </entry>
  
  <entry>
    <title>项目收集</title>
    <link href="https://lazyo.gitee.io/p/990847033/"/>
    <id>https://lazyo.gitee.io/p/990847033/</id>
    <published>2022-06-08T12:55:00.000Z</published>
    <updated>2022-06-08T14:48:28.637Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="391671057d8a3bc3c410564d772782fb0dbbaa7e4cdf5675f38bebfeb7b028f8"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">一些开源的后端项目</summary>
    
    
    
    <category term="项目" scheme="https://lazyo.gitee.io/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="项目收集" scheme="https://lazyo.gitee.io/categories/%E9%A1%B9%E7%9B%AE/%E9%A1%B9%E7%9B%AE%E6%94%B6%E9%9B%86/"/>
    
    
  </entry>
  
  <entry>
    <title>在线博客系统-部署相关</title>
    <link href="https://lazyo.gitee.io/p/2062540690/"/>
    <id>https://lazyo.gitee.io/p/2062540690/</id>
    <published>2022-06-04T11:26:58.000Z</published>
    <updated>2022-06-10T14:27:04.084Z</updated>
    
    <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><p>启动docker: <code>/bin/systemctl start docker.service</code></p><p>如果已经启动的项目.则使用update更新：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker update --restart = always 容器id</span><br></pre></td></tr></table></figure></p><h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br><span class="line">docker pull redis:5.0.3</span><br><span class="line">docker pull java:8</span><br><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><p>创建容器，设置端口映射、目录映射<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /mnt/docker/mysql</span><br><span class="line"><span class="built_in">cd</span> /mnt/docker/mysql</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -<span class="built_in">id</span> \</span><br><span class="line">-p 3307:3306 \</span><br><span class="line">--name=mysql \</span><br><span class="line">-v /mnt/docker/mysql/conf:/etc/mysql/conf.d \</span><br><span class="line">-v /mnt/docker/mysql/logs:/logs \</span><br><span class="line">-v /mnt/docker/mysql/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root \</span><br><span class="line">mysql:5.7</span><br></pre></td></tr></table></figure><p>在/mnt/docker/mysql/conf 创建<code>my.cnf</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">datadir=/var/lib/mysql</span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line">character-set-server=utf-8</span><br><span class="line">symbolic-links=0</span><br><span class="line">lower_case_table_names=1</span><br><span class="line">pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line">sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span><br></pre></td></tr></table></figure></p><p>查看是否启动成功：<code>docker logs -f cysql</code>，查看mysql对应docker容器中的ip地址：<code>docker inspect mysql</code>，其实这里直接就是<code>虚拟机地址:3307</code></p><h3 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h3><p><a href="https://raw.githubusercontent.com/redis/redis/5.0/redis.conf">redis5.0配置文件链接</a>, 修改配置文件</p><ul><li>禁用仅本地连接<code># bind 127.0.0.1</code></li><li>关闭守护进程后台启动 <code>daemonize no</code></li><li>关闭保护模式 <code>protected-mode no</code></li></ul><p>将<code>redis.conf</code>上传到服务器，我这里存放的路径是<code>/home/mydata/redis/conf</code>, </p><p>启动redis:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 6379:6379 --name redis -v /home/mydata/redis/data:/data -v /home/mydata/redis/conf/redis.conf:/etc/redis/redis.conf --restart=always --network common-network -d redis redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure><h3 id="rabbitmq"><a href="#rabbitmq" class="headerlink" title="rabbitmq"></a>rabbitmq</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker pull rabbitmq</span><br><span class="line">[root@localhost etc]# docker images</span><br><span class="line">REPOSITORY      TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">rabbitmq        latest    095a32092e8f   10 hours ago   224MB</span><br><span class="line">web-container   latest    5bb1c42fca17   38 hours ago   144MB</span><br><span class="line">node            latest    e3cb0fb99b7c   2 days ago     996MB</span><br><span class="line">redis           latest    53aa81e8adfa   11 days ago    117MB</span><br><span class="line">nginx           latest    0e901e68141f   11 days ago    142MB</span><br><span class="line">mysql           5.7       2a0961b7de03   11 days ago    462MB</span><br><span class="line">redis           5.0.3     0f88f9be5839   3 years ago    95MB</span><br><span class="line">java            latest    d23bdf5b1b1b   5 years ago    643MB</span><br></pre></td></tr></table></figure><p>创建和启动容器<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --hostname my-rabbit -d --restart=always -p 5672:5672 -p 15672:15672 -v `pwd`/data:/var/lib/rabbitmq --hostname myRabbit -e RABBITMQ_DEFAULT_VHOST=my_vhost  -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin 095a32092e8f</span><br></pre></td></tr></table></figure></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">-d 后台运行容器；</span><br><span class="line"></span><br><span class="line">--name 指定容器名；</span><br><span class="line"></span><br><span class="line">-p 指定服务运行的端口（5672：应用访问端口；15672：控制台Web端口号）；</span><br><span class="line"></span><br><span class="line">-v 映射目录或文件；</span><br><span class="line"></span><br><span class="line">--hostname  主机名（RabbitMQ的一个重要注意事项是它根据所谓的 “节点名称” 存储数据，默认为主机名）；</span><br><span class="line"></span><br><span class="line">--restart具体参数值详细信息：</span><br><span class="line">   no -  容器退出时，不重启容器；</span><br><span class="line">   on-failure - 只有在非0状态退出时才从新启动容器；</span><br><span class="line">   always - 无论退出状态是如何，都重启容器；</span><br><span class="line">   </span><br><span class="line">-e 指定环境变量；（RABBITMQ_DEFAULT_VHOST：默认虚拟机名；RABBITMQ_DEFAULT_USER：默认的用户名；RABBITMQ_DEFAULT_PASS：默认用户名的密码）</span><br><span class="line"></span><br><span class="line">2888deb59dfc 镜像id，即上边的IMAGE ID</span><br></pre></td></tr></table></figure><h1 id="打包部署"><a href="#打包部署" class="headerlink" title="打包部署"></a>打包部署</h1><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>修改前端项目中配置的<code>VUE_APP_BASE_API</code>。执行 <code>npm run build:prod</code>，将打包好的dist目录传送到服务器上。在dist同级路径下新建<code>Dockerfile</code> ，之后<code>vim Dockerfile</code>。<br><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM nginx</span><br><span class="line">MAINTAINER lazy</span><br><span class="line">COPY dist/ /usr/share/nginx/html</span><br><span class="line">COPY default.conf /etc/nginx/conf.d/default.conf</span><br></pre></td></tr></table></figure></p><p>同样的，在dist同级路径下执行<code>vim default.conf</code>，进入nginx配置的编辑，文件内容如下。注意，<code>listen</code>的端口需要和前端项目中配置的端口一致。<br><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">listen       9528;</span><br><span class="line">server_name  localhost;</span><br><span class="line"></span><br><span class="line">#charset koi8-r;</span><br><span class="line">access_log  /var/log/nginx/host.access.log  main;</span><br><span class="line">error_log  /var/log/nginx/error.log  error;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">    root   /usr/share/nginx/html;</span><br><span class="line">    index  index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line"># redirect server error pages to the static page /50x.html</span><br><span class="line">#</span><br><span class="line">error_page   500 502 503 504  /50x.html;</span><br><span class="line">location = /50x.html &#123;</span><br><span class="line">    root   /usr/share/nginx/html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="构建镜像并启动相应容器"><a href="#构建镜像并启动相应容器" class="headerlink" title="构建镜像并启动相应容器"></a>构建镜像并启动相应容器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t container .</span><br><span class="line">docker run -d -p 9528:9528 --name web-app container</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">使用docker部署前端项目</summary>
    
    
    
    <category term="项目" scheme="https://lazyo.gitee.io/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="在线博客系统" scheme="https://lazyo.gitee.io/categories/%E9%A1%B9%E7%9B%AE/%E5%9C%A8%E7%BA%BF%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="教程" scheme="https://lazyo.gitee.io/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>在线博客系统-问题总结</title>
    <link href="https://lazyo.gitee.io/p/3636245336/"/>
    <id>https://lazyo.gitee.io/p/3636245336/</id>
    <published>2022-05-31T11:21:26.000Z</published>
    <updated>2022-06-10T14:16:37.937Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础功能"><a href="#基础功能" class="headerlink" title="基础功能"></a>基础功能</h1><h2 id="雪花算法"><a href="#雪花算法" class="headerlink" title="雪花算法"></a>雪花算法</h2><blockquote><p><a href="https://zhuanlan.zhihu.com/p/433690272">面试官：讲讲雪花算法，越详细越好</a></p><h3 id="数据失真"><a href="#数据失真" class="headerlink" title="数据失真"></a>数据失真</h3><p>后端字段对应<code>long</code>类型，数据库对应<code>bigint</code>。由于采用雪花算法生成每条记录的唯一标识，自然采用<code>long</code>类型进行存储。而在前端查询数据时，<code>long</code>型的数据失真了。就由于后端返回的以及数据库中存储的不对应。</p></blockquote><p>后端java返回实体对象中，该字段如下设置，输出转换为字符串类型，可以保证数据的不失真。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonFormat(shape = JsonFormat.Shape.STRING)</span></span><br><span class="line"><span class="keyword">private</span> Long userUuid;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">博客项目中涉及到的知识点</summary>
    
    
    
    <category term="项目" scheme="https://lazyo.gitee.io/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="在线博客系统" scheme="https://lazyo.gitee.io/categories/%E9%A1%B9%E7%9B%AE/%E5%9C%A8%E7%BA%BF%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="项目总结" scheme="https://lazyo.gitee.io/tags/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>背包问题</title>
    <link href="https://lazyo.gitee.io/p/2992793922/"/>
    <id>https://lazyo.gitee.io/p/2992793922/</id>
    <published>2022-05-22T02:29:05.000Z</published>
    <updated>2022-05-23T13:47:41.771Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><h2 id="背包问题九讲"><a href="#背包问题九讲" class="headerlink" title="背包问题九讲"></a>背包问题九讲</h2><blockquote><p><a href="http://cuitianyi.com/Pack/">背包问题九讲</a></p></blockquote><p>这是我在评论区看到别人推荐的最经典的了。然而因为这篇文章太经典写得太早，代码没有插件，也没有配图，我看得很难受（纯粹是我理解能力太差）</p><h2 id="宫水三叶"><a href="#宫水三叶" class="headerlink" title="宫水三叶"></a>宫水三叶</h2><blockquote><p><a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzU4NDE3MTEyMA==&amp;action=getalbum&amp;album_id=1751702161341628417&amp;scene=173&amp;from_msgid=2247486435&amp;from_itemidx=1&amp;count=3&amp;nolastread=1#wechat_redirect">题解集合链接</a></p></blockquote><p>我发现一个规律，其实很早就好奇了：<del>喜欢二次元和能成为技术大牛之间到底有啥联系？</del></p><h2 id="希望用一种规律搞定背包问题"><a href="#希望用一种规律搞定背包问题" class="headerlink" title="希望用一种规律搞定背包问题"></a>希望用一种规律搞定背包问题</h2><blockquote><p><a href="https://leetcode.cn/problems/combination-sum-iv/solution/xi-wang-yong-yi-chong-gui-lu-gao-ding-bei-bao-wen-/">解题思路</a></p></blockquote>]]></content>
    
    
    <summary type="html">常见的背包题型，从0-1背包到各种背包的变形，的一些可参考链接以及笔记</summary>
    
    
    
    <category term="剑指Offer" scheme="https://lazyo.gitee.io/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    <category term="常见题型" scheme="https://lazyo.gitee.io/categories/%E5%89%91%E6%8C%87Offer/%E5%B8%B8%E8%A7%81%E9%A2%98%E5%9E%8B/"/>
    
    
    <category term="算法" scheme="https://lazyo.gitee.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="背包问题" scheme="https://lazyo.gitee.io/tags/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>日记20220521</title>
    <link href="https://lazyo.gitee.io/p/4151840936/"/>
    <id>https://lazyo.gitee.io/p/4151840936/</id>
    <published>2022-05-21T13:14:01.000Z</published>
    <updated>2022-05-21T13:25:34.036Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="72a4b9230214633f7af4dd21918fd9a4183f638cef9872ad4703f822965fcdfb">b6bc2a15b97ace701a14f9e1ad104e8f741e4427cae730fb04ad30a4ed1697f1f91379c480331c6746955ef8753f1380bf8d29a1ecd77e4553b6d4dc1c93147fa6ee6c506c4f01d3f9d6377119c8bf1487c430a642de6267cae63f58bae9293853d0e37310b50c0acf70bda3c6f0fdef6928c872cd20cd9691d3d356cce8c419a0e5aaf1de0c82c662d775903ce9677f443cfc03ab880cf2c2d181a9c902891c74e1e0147fc7a991cc2bce594ac7812fb171685c9bbc7d33121c4456abef555122392f8e99e0309d39c89dd343d77deafcbd3fac3ab0c63f8b85b2e6190d5df8b10dc8f0740b3c80cdeb84fa7db99955e2c4406d41e69893955bc63eba22f874fbfd403b32d7210e4d04548731c9ee228df6d68cb9ba0afe1e46d42bb9f1048086a1bf03bc3f24311016bae91c7fb269003bcd8f6ff85f38a380d5fd21c51f74e0f5ffea8b8396b1a494147527f8d88591c093701a12a1fa9d88220224746552f3b2d968d6f7d6ed7b47d728379be84a8723f87a56f2733563210408ec7744009f8ad304b7b2aa855f60fb0b1b9bdff6ec1a54623ca36ce3178c36581593ef83d96ff4350c03782978ebb1b6696ebef35d06a42166a3b2dbd9d8b67a1480fdf78f065a76d1c5a90429acda4d50ef02c3c081349b17992d7b04fee72ae2c21c542f4e97dd57905f2f348c82b99246c16c964e9aa193ea1172054663d0971c7c2e1d8340545455109f36bf273cfda44414faa250cc24ce5fc717a6e7243edb6478fcb780d66d0df0dc542024443d8aca06aca48dc415f33a21d1a16d4b761f5e0435de3894443ed69f2d58bc5b990f40bd4fd3864fcb23b76ce1bcb09873e55fa25a419b1244ddec61152308b992d7b8a67da6a257a36b7ed8f7795096153f5bc2a704ea68a076c5a443318659918beabcf2cb6087034bdcbe8ec8c2b01810d4f4997c5f6611a1224aa12518d8bd7403ab744f9df97d32666b93b40b8b9b6a86577a369c7f0536d4057806cf0573f41cda08f1b8ad7121554a6b8723f629e7c9a78a9e887630ac37084cc3950207e8556cc138281a29ff8dd37eeec7c25c6370e07e5ad260d4d7bf47fc3c118a35d474f2b62729a1aa703865aef112386ee6ebd23b2364588dc1a13afb7bf5a1b136003ad2e9d745919776d909bea9802e23277079a2bf4083f882e5b8b686ba836c4196b8246bfa85d1b6e6d3e67f5a097be66a68d2c53edc7cea31324a40f0d5dbb128f4de33c7afa359de34cdc26647814761e21cf1c814c501511687aabf29cfc05ec353e07009f2cbfe74afbedc9ddd9e7d9825ab7b1de81b29d4e04f9e4c75122bb1e65707cc8a107873aacfd77e1bd761a11a532780bce60442e3bc364b6bcd98beda3e9965b3f892f2156fa58ec5a437468e645a9b4659f556ddfcaa64b780d7</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">日记，顺便测试一下刚发现的新功能：文章加密</summary>
    
    
    
    <category term="随笔" scheme="https://lazyo.gitee.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>Java |与||、&amp;与&amp;&amp;，或与非的使用和区别</title>
    <link href="https://lazyo.gitee.io/p/2876457546/"/>
    <id>https://lazyo.gitee.io/p/2876457546/</id>
    <published>2022-05-21T10:24:39.000Z</published>
    <updated>2022-05-21T11:55:13.504Z</updated>
    
    <content type="html"><![CDATA[<h1 id="“与”和”或”的定义区别"><a href="#“与”和”或”的定义区别" class="headerlink" title="“与”和”或”的定义区别"></a>“与”和”或”的定义区别</h1><ul><li>使用”与”操作，要求所有的表达式的判断结果都是<code>true</code>才为真；若有一个<code>false</code>，则最终判断结果为假</li><li>使用“或”操作，要求所有的表达式的判断结果都是<code>false</code>才为假；若有一个为<code>true</code>，则最终的判断结果为真</li></ul><h1 id="amp-、-amp-amp-使用和区别"><a href="#amp-、-amp-amp-使用和区别" class="headerlink" title="&amp;、&amp;&amp;使用和区别"></a>&amp;、&amp;&amp;使用和区别</h1><ul><li><p><code>&amp;</code>：前面的表达式为真时，继续执行后面的表达式，最后再得出结果。如以下代码，说明后面的表达式执行了，不影响判断结果。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">10</span> == <span class="number">10</span> &amp; (i++) != <span class="number">1</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;结果为真&quot;</span> + i);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;结果为假&quot;</span> + i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="comment">// 结果为真1</span></span><br></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">10</span> != <span class="number">10</span> &amp; (i++) == <span class="number">1</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;结果为真&quot;</span> + i);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;结果为假&quot;</span> + i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="comment">// 结果为假1</span></span><br></pre></td></tr></table></figure></li><li><p><code>&amp;&amp;</code>：前面表达式为假时，就不会执行后面的表达式，直接得出<code>false</code>的结果。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">10</span> != <span class="number">10</span> &amp;&amp; (i++) == <span class="number">1</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;结果为真&quot;</span> + i);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;结果为假&quot;</span> + i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="comment">// 结果为假0</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="、-的使用和区别"><a href="#、-的使用和区别" class="headerlink" title="|、||的使用和区别"></a>|、||的使用和区别</h1><ul><li><p><code>|</code>：前面的表达式为真时，程序会继续执行后面的表达式，然后在得出<code>true</code>的结果</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">10</span> != <span class="number">10</span> | (i++) == <span class="number">1</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;结果为真&quot;</span> + i);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;结果为假&quot;</span> + i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="comment">// 结果为假1</span></span><br></pre></td></tr></table></figure></li><li><code>||</code>：前面的表达式结果为真，则程序不会再执行后面的表达式，直接得出<code>true</code>的结果  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">10</span> == <span class="number">10</span> || (i++) != <span class="number">0</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;结果为真&quot;</span> + i);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;结果为假&quot;</span> + i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="comment">// 结果为真0</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">在这之前，我一直以为&amp;是用在位运算，然后&amp;&amp;用于条件</summary>
    
    
    
    <category term="八股" scheme="https://lazyo.gitee.io/categories/%E5%85%AB%E8%82%A1/"/>
    
    <category term="基础" scheme="https://lazyo.gitee.io/categories/%E5%85%AB%E8%82%A1/%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="基础语法" scheme="https://lazyo.gitee.io/tags/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>String类</title>
    <link href="https://lazyo.gitee.io/p/1559452841/"/>
    <id>https://lazyo.gitee.io/p/1559452841/</id>
    <published>2022-05-07T11:23:41.000Z</published>
    <updated>2022-05-07T13:23:50.390Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="构造字符串"><a href="#构造字符串" class="headerlink" title="构造字符串"></a>构造字符串</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 由字符数组构造字符串 public String(char value[], int offset, int count);</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(chars, <span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由数字得到字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="number">123</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> String.valueOf(<span class="number">123</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> Integer.toString(<span class="number">123</span>);</span><br></pre></td></tr></table></figure><h1 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h1><h2 id="三种构造方法与-的判断"><a href="#三种构造方法与-的判断" class="headerlink" title="三种构造方法与==的判断"></a>三种构造方法与==的判断</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> String.valueOf(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s6</span> <span class="operator">=</span> String.valueOf(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">System.out.println(s1 == s2); <span class="comment">// true 均是指向常量池中的&quot;&quot;,因此相等</span></span><br><span class="line">System.out.println(s1 == s3); <span class="comment">// false 代表堆上的对象，与 s1 不等</span></span><br><span class="line">System.out.println(s3 == s4); <span class="comment">// false 分别代表不同对象</span></span><br><span class="line">System.out.println(s5 == s1); <span class="comment">// true</span></span><br><span class="line">System.out.println(s5 == s6); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><img src="/p/1559452841/1.jpg" alt="关系调用图"></p><h2 id="new-String-“aab”-创建了几个对象"><a href="#new-String-“aab”-创建了几个对象" class="headerlink" title="new String(“aab”)创建了几个对象"></a>new String(“aab”)创建了几个对象</h2><blockquote><p>参考文章：<a href="https://blog.csdn.net/qq_45798556/article/details/117924203">深入了解new String</a>、<a href="https://baijiahao.baidu.com/s?id=1714914983791082793&amp;wfr=spider&amp;for=pc">new String(“abc”)创建了几个对象</a>、<a href="https://blog.csdn.net/o9109003234/article/details/109523691">美团面试题</a></p></blockquote>]]></content>
    
    
    <summary type="html">.</summary>
    
    
    
    <category term="八股" scheme="https://lazyo.gitee.io/categories/%E5%85%AB%E8%82%A1/"/>
    
    <category term="基础" scheme="https://lazyo.gitee.io/categories/%E5%85%AB%E8%82%A1/%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="基础语法" scheme="https://lazyo.gitee.io/tags/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
    <category term="技巧" scheme="https://lazyo.gitee.io/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>回溯</title>
    <link href="https://lazyo.gitee.io/p/4180606813/"/>
    <id>https://lazyo.gitee.io/p/4180606813/</id>
    <published>2022-05-03T02:24:03.000Z</published>
    <updated>2022-05-09T08:55:36.766Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本框架"><a href="#基本框架" class="headerlink" title="基本框架"></a>基本框架</h1><p>如果是需要记录路径的，比如二叉树的路径和。那么添加节点是在判断语句里面加。先添加，后递归，最后撤销选择。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(cur.left != <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="comment">// 开始做选择</span></span><br><span class="line">    path.add(cur.left.val);</span><br><span class="line">    count -= cur.left.val;</span><br><span class="line">    <span class="comment">// 递归</span></span><br><span class="line">    traverse(cur.left, count);</span><br><span class="line">    <span class="comment">// 递归结束之后撤销选择</span></span><br><span class="line">    count += cur.left.val;</span><br><span class="line">    path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cur.right != <span class="literal">null</span>)&#123;</span><br><span class="line">    path.add(cur.right.val);</span><br><span class="line">    count -= cur.right.val;</span><br><span class="line">    traverse(cur.right, count);</span><br><span class="line">    count += cur.right.val;</span><br><span class="line">    path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h2><p>我刷了《代码随想录》这本书，发现回溯好像会遇到两种模式的去重，先记录下来。</p><h3 id="原始数组顺序可改变"><a href="#原始数组顺序可改变" class="headerlink" title="原始数组顺序可改变"></a>原始数组顺序可改变</h3><blockquote><p>参考题目：<a href="https://leetcode-cn.com/problems/combination-sum-ii/">40.组合总和Ⅱ(中等)</a></p></blockquote><p>简单的说，集合中有重复的元素，但是不能有重复的组合。难点是<strong>如何去除重复的组合</strong>，这种情况，原数组中元素的顺序没有影响，所以往往通过数组排序，通过相邻的节点判断元素是否重复使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// candidates已经升序排序</span></span><br><span class="line"><span class="comment">// boolean[] visited = new boolean[n];</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt; candidates.length; i++)&#123;</span><br><span class="line">    <span class="comment">// 跳过同一层使用过的元素</span></span><br><span class="line">    <span class="keyword">if</span>(i != <span class="number">0</span> &amp;&amp; candidates[i] == candidates[i-<span class="number">1</span>] &amp;&amp; visited[i-<span class="number">1</span>] == <span class="literal">false</span>)&#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/p/4180606813/1.png" alt="解题图示"></p><h3 id="不能破坏原始数组顺序"><a href="#不能破坏原始数组顺序" class="headerlink" title="不能破坏原始数组顺序"></a>不能破坏原始数组顺序</h3><blockquote><p>参考题目：<a href="https://leetcode-cn.com/problems/increasing-subsequences/">491.递增子序列(中等)</a></p></blockquote><p>上面这道题，要求求递增的子序列，那么原数组元素的顺序自然不能改变了。一开始，我还是和第一种类型的一样，先排序再增加标记数组来做，发现还是不能达到去重的效果。然后看题解，发现这道题作者把标记数组放在了回溯函数内部。</p><p>带 <wavy>标记数组的作用是记录本层元素是否重复使用，新的一层都会重新定义(清空)数组，数组只负责递归过程中本层的逻辑</wavy>。 而且，由于不能排序，就不能通过相邻元素来获取相同的数字是否使用过了，作者这里开了一个题目使用到的所有数字的标记数组。即单个元素的取值为<code>-100&lt;=nums[i]&lt;=100</code>，则标记数组为<code>boolean[] used = new boolean[201];</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrace</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> startIndex)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(path.size() &gt;= <span class="number">2</span>)&#123;</span><br><span class="line">        res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(path));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 之前是用等容量的boolean 标记，但是忽略了比如[4,7,6,7],忽略了重复数字的选择 </span></span><br><span class="line">    <span class="type">int</span>[] used = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">201</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt; nums.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>((path.size() &gt; <span class="number">0</span> &amp;&amp; nums[i] &lt; path.get(path.size() - <span class="number">1</span>)) || used[nums[i]+<span class="number">100</span>] == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        used[nums[i] + <span class="number">100</span>] = <span class="number">1</span>;</span><br><span class="line">        path.add(nums[i]);</span><br><span class="line">        backtrace(nums, i + <span class="number">1</span>);</span><br><span class="line">        path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这道题，想了很久为什么写在里面才是正确的结果。去重，就是使用过的元素不能重复选取。“使用过”在树形结构上有两个维度，一个维度是<strong>在同一树枝上使用过</strong>，另一个维度是<strong>在同一树层上使用过</strong>。</p><p><img src="/p/4180606813/2.png" alt="解题图示"></p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>如果需要记录沿途的选择，一次选择的结果用链表来存放的话，当满足条件需要将一条结果保存到总的记录中时，一定要加入新的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 条件满足时</span></span><br><span class="line"><span class="keyword">if</span>(cur.left == <span class="literal">null</span> &amp;&amp; cur.right == <span class="literal">null</span> &amp;&amp; count == <span class="number">0</span>)&#123;</span><br><span class="line">    res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(path));</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">回溯算法</summary>
    
    
    
    <category term="剑指Offer" scheme="https://lazyo.gitee.io/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    <category term="常见题型" scheme="https://lazyo.gitee.io/categories/%E5%89%91%E6%8C%87Offer/%E5%B8%B8%E8%A7%81%E9%A2%98%E5%9E%8B/"/>
    
    
    <category term="回溯" scheme="https://lazyo.gitee.io/tags/%E5%9B%9E%E6%BA%AF/"/>
    
    <category term="注意点" scheme="https://lazyo.gitee.io/tags/%E6%B3%A8%E6%84%8F%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>藏在算法里面的美好</title>
    <link href="https://lazyo.gitee.io/p/3390944837/"/>
    <id>https://lazyo.gitee.io/p/3390944837/</id>
    <published>2022-05-01T12:27:25.000Z</published>
    <updated>2022-05-08T11:57:30.025Z</updated>
    
    <content type="html"><![CDATA[<div class="poem"><div class="poem-title">两数之和</div><div class="poem-author"></div><p>有人相爱，<br>有人夜里开车看海，<br>有人leetcode第一题<br>都做不出来。</p></div><h1 id="两个链表的第一个公共节点"><a href="#两个链表的第一个公共节点" class="headerlink" title="两个链表的第一个公共节点"></a>两个链表的第一个公共节点</h1><p>题目来自：<a href="https://leetcode-cn.com/problems/liang-ge-lian-biao-de-di-yi-ge-gong-gong-jie-dian-lcof/">剑指Offer 52.两个链表的第一个公共节点(简单)</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入两个链表，找出它们的第一个公共节点。如下面的两个链表：<img src="/p/3390944837/160_statement.png" alt="题目图示"></p><p>题目数据<strong>保证</strong>整个链式结构中不存在环。注意，函数返回结果后，链表必须<strong>保持其原始结构</strong>。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (headA == <span class="literal">null</span> || headB == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">pA</span> <span class="operator">=</span> headA, pB = headB;</span><br><span class="line">    <span class="keyword">while</span> (pA != pB) &#123;</span><br><span class="line">        pA = pA == <span class="literal">null</span> ? headB : pA.next;</span><br><span class="line">        pB = pB == <span class="literal">null</span> ? headA : pB.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="带创作"><a href="#带创作" class="headerlink" title="带创作"></a>带创作</h2><blockquote><ul><li>走到尽头见不到你，于是走过你来时的路，等到相遇时才发现，你也走过我来时的路。</li><li>无缘的人就算走过彼此所有的路，也是相遇在None。</li><li>你变成我，走过我走过的路；我变成你，走过你走过的路。终有一天，我们会相遇。</li></ul></blockquote><p>这道题很早之前就刷到了，看了题解也觉得评论区的某些网友真的有才。不过决定写这篇文章的，还是因为下面这道题的题解。</p><h1 id="二叉树的所有路径"><a href="#二叉树的所有路径" class="headerlink" title="二叉树的所有路径"></a>二叉树的所有路径</h1><p>题目来自：<a href="https://leetcode-cn.com/problems/binary-tree-paths/">257.二叉树的所有路径</a></p><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一个二叉树的根节点 <code>root</code> ,按照<strong>任意顺序</strong>，返回所有从根节点到叶子节点的路径。<strong>叶子节点</strong>是指没有子节点的节点。</p><p><img src="/p/3390944837/paths-tree.jpg" alt="题目图示"></p><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><h3 id="递归1"><a href="#递归1" class="headerlink" title="递归1"></a>递归1</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    求出所有路径-&gt;回溯</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">binaryTreePaths</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        dfs(root);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="comment">// 先将root的值加入path</span></span><br><span class="line">        path.add(root.val);</span><br><span class="line">        <span class="comment">// 若root是叶子节点-&gt;将sb加入res</span></span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> num : path) sb.append(num).append(<span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">            res.add(sb.substring(<span class="number">0</span>, sb.length() - <span class="number">2</span>));</span><br><span class="line">            <span class="comment">// 结束</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 若root不是叶子节点-&gt;遍历root的左右子节点</span></span><br><span class="line">        <span class="keyword">if</span> (root.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            dfs(root.left);</span><br><span class="line">            <span class="comment">// 撤回</span></span><br><span class="line">            path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            dfs(root.right);</span><br><span class="line">            <span class="comment">// 撤回</span></span><br><span class="line">            path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归2"><a href="#递归2" class="headerlink" title="递归2"></a>递归2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getPaths</span><span class="params">(TreeNode root, String path, List&lt;String&gt;res)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 节点值加入当前路径</span></span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">onepath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(path);</span><br><span class="line">        onepath.append(Integer.toString(root.val));</span><br><span class="line">        <span class="comment">// 如果当前节点是叶子节点，将当前路径加入结果集</span></span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>)&#123;</span><br><span class="line">            res.add(onepath.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果当前节点不是叶子节点，继续遍历左子树和右子树</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            onepath.append(<span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">            getPaths(root.left, onepath.toString(), res);</span><br><span class="line">            getPaths(root.right, onepath.toString(), res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">binaryTreePaths</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        getPaths(root, <span class="string">&quot;&quot;</span>, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">binaryTreePaths</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">        Stack&lt;Object&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        stack.push(root.val + <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">// 节点和路径出栈</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> (String) stack.pop();</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> (TreeNode) stack.pop();</span><br><span class="line">            <span class="comment">// 如果当前节点为叶子节点</span></span><br><span class="line">            <span class="keyword">if</span> (node.left == <span class="literal">null</span> &amp;&amp; node.right == <span class="literal">null</span>) &#123;</span><br><span class="line">                res.add(path);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 右子树入栈</span></span><br><span class="line">            <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                stack.push(node.right);</span><br><span class="line">                stack.push(path + <span class="string">&quot;-&gt;&quot;</span> + node.right.val);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 左子树入栈</span></span><br><span class="line">            <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                stack.push(node.left);</span><br><span class="line">                stack.push(path + <span class="string">&quot;-&gt;&quot;</span> + node.left.val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="带创作-1"><a href="#带创作-1" class="headerlink" title="带创作"></a>带创作</h2><blockquote><p>回溯要和递归永远在一起。</p></blockquote><p>这道题是很久之后再次接触到回溯的题目了，我有点忘记该在什么时候开始递归，什么时候执行撤回。后面看书的时候，看到上面这句话，恍然大悟，这下后面再碰到回溯的题，应该不会忘记了。</p>]]></content>
    
    
    <summary type="html">一些书上或者题解中捕捉到的算法中的浪漫...</summary>
    
    
    
    <category term="随笔" scheme="https://lazyo.gitee.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="算法" scheme="https://lazyo.gitee.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Java基础知识</title>
    <link href="https://lazyo.gitee.io/p/398957599/"/>
    <id>https://lazyo.gitee.io/p/398957599/</id>
    <published>2022-04-27T10:47:18.000Z</published>
    <updated>2022-04-30T04:37:32.784Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><h2 id="浮点数和整数除以0的不同"><a href="#浮点数和整数除以0的不同" class="headerlink" title="浮点数和整数除以0的不同"></a>浮点数和整数除以0的不同</h2><p>当浮点数除以 0 的时候，结果为 Infinity 或者 NaN。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">10.0</span> / <span class="number">0.0</span>); <span class="comment">// Infinity</span></span><br><span class="line">System.out.println(<span class="number">0.0</span> / <span class="number">0.0</span>); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><p>Infinity 的中文意思是无穷大，NaN 的中文意思是这不是一个数字（Not a Number）。</p><p>当整数除以 0 的时候（10 / 0），会抛出异常：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.ArithmeticException: / by zero</span><br><span class="line">at com.itwanger.eleven.ArithmeticOperator.main(ArithmeticOperator.java:32)</span><br></pre></td></tr></table></figure><p>所以整数在进行除法运算时，需要先判断除数是否为 0，以免程序抛出异常。</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="实现多个接口默认的方法"><a href="#实现多个接口默认的方法" class="headerlink" title="实现多个接口默认的方法"></a>实现多个接口默认的方法</h3><p>懒得复制文字了，先贴一张别人总结的思维导图。<a href="https://blog.csdn.net/qfc_128220/article/details/114658663">关于接口更详细的解答</a></p><p><img src="/p/398957599/接口.png" alt="接口"></p><p>我是看到说Java在原则上只能单继承，因为多继承的话会出现菱形问题，即B、C继承了A，且各自重写了A中的一个方法，这时候有一个D，如果继承B和C的话当时重写的方法就不知道该用哪一个。于是引入接口可以实现多个。我继续往后面看，提到<strong>接口可以有默认方法</strong>。那我就和继承对应上了，如果两个接口有一个同名的默认方法，一个类同时实现这两个接口，会发生什么呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fly 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Fly</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">walk</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Fly: walk&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Run 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Run</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">walk</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Run: walk&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfaceTest</span> <span class="keyword">implements</span> <span class="title class_">Fly</span>, Run &#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只写了上面的代码，编辑器会提示错误，按下 <code>alt + enter</code> 后编辑器会自动弹出来需要实现的方法，但是同名的两个默认方法没有被自动选中。</p><p><img src="/p/398957599/IDEA.jpg" alt="编辑器提示"></p><p>如果你不把默认方法也选中的话，还是会有错误提示。你强行执行的话，会报错。</p><p><img src="/p/398957599/IDEA2.jpg" alt="保持默认后报错"></p><p>所以还是得老老实实实现这个方法。智能提示是这样做的。可以自己写，也可以就用某一个接口的默认方法，至于为啥是用的Fly，我猜是实现的时候先写的Fly。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">walk</span><span class="params">()</span> &#123;</span><br><span class="line">Fly.<span class="built_in">super</span>.walk();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>这次再说一下，我以为上面的 <code>default</code> 是和访问控制符一个意思，意思 <code>public</code>、 <code>private</code> 、 <code>default</code> 是同级的，结果将接口的抽象方法定义为 <code>default</code> 之后，也会在前面加上 <code>public</code> 。</p><p>Jdk9之后，接口引入了一个新成员：私有方法。该成员被private修饰。除了私有方法外，其他成员都都默认被public修饰：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常量: </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 抽象方法: </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 默认方法: </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">default</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 静态方法: </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 内部类和枚举类: </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">看别人总结的八股，有一些地方是自己不知道的或者记错了的小基础。</summary>
    
    
    
    <category term="八股" scheme="https://lazyo.gitee.io/categories/%E5%85%AB%E8%82%A1/"/>
    
    <category term="基础" scheme="https://lazyo.gitee.io/categories/%E5%85%AB%E8%82%A1/%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="查漏补缺" scheme="https://lazyo.gitee.io/tags/%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/"/>
    
    <category term="基础语法" scheme="https://lazyo.gitee.io/tags/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>KMP算法</title>
    <link href="https://lazyo.gitee.io/p/765481614/"/>
    <id>https://lazyo.gitee.io/p/765481614/</id>
    <published>2022-04-25T14:05:53.000Z</published>
    <updated>2022-04-26T13:09:33.399Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><blockquote><p>视频讲解：<a href="https://www.bilibili.com/video/BV1Px411z7Yo">KMP算法讲解(正月点灯笼)</a>，<a href="https://www.bilibili.com/video/BV18k4y1m7Ar">KMP(油管印度小哥)</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">求前缀表</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span>[] getPrefix(<span class="type">char</span>[] pattern)&#123;</span><br><span class="line">        <span class="type">int</span>[] prefix = <span class="keyword">new</span> <span class="title class_">int</span>[pattern.length];</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>, index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; pattern.length)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pattern[i] == pattern[index])&#123;</span><br><span class="line">                prefix[i] = index + <span class="number">1</span>;</span><br><span class="line">                i++;</span><br><span class="line">                index++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(index != <span class="number">0</span>)&#123;</span><br><span class="line">                    index = prefix[index - <span class="number">1</span>];</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> prefix;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">KMPSearch</span><span class="params">(String haystack, String needle)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] text = haystack.toCharArray();</span><br><span class="line">        <span class="type">char</span>[] pattern = needle.toCharArray();</span><br><span class="line">        <span class="type">int</span>[] prefix = getPrefix(pattern);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; text.length &amp;&amp; j &lt; pattern.length)&#123;</span><br><span class="line">            <span class="keyword">if</span>(text[i] == pattern[j])&#123;</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(j != <span class="number">0</span>)&#123;</span><br><span class="line">                    j = prefix[j - <span class="number">1</span>];</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j == pattern.length)&#123;</span><br><span class="line">            <span class="keyword">return</span> i - j;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="插曲"><a href="#插曲" class="headerlink" title="插曲"></a>插曲</h2><p>在求前缀表的时候，有一部分代码是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正确的写法</span></span><br><span class="line"><span class="keyword">if</span>(pattern[i] == pattern[index])&#123;</span><br><span class="line">    prefix[i] = index + <span class="number">1</span>;</span><br><span class="line">    i++;</span><br><span class="line">    index++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 我最初的写法</span></span><br><span class="line"><span class="keyword">if</span>(pattern[i] == pattern[index])&#123;</span><br><span class="line">    i++;</span><br><span class="line">    index++;</span><br><span class="line">    prefix[i] = index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我调试的时候，前缀表怎么都算不对，然后我照着模板一行一行对比下来，没发现问题（前提是我认为上面的代码是等同的）。于是我重新把模板敲了一遍，就很神奇，模板的输出结果是正确的。于是我又开始一行一行对比下来，最终就定位到了上面，真的只有上面几行不同。</p><p>我就很莫名奇妙，因为我的关注点全放在了<code>index++</code>上，我心想，自增后赋值就已经加一了。我甚至去试了<code>++index</code>，还是不行。于是我叫我室友过来，叫她看看这三行代码是否可以互换。尴尬的地方来了，我一边说奇怪的地方，一边跟她大致解释代码。突然就反应过来真正的问题出在哪里了。</p><p>是<code>i++</code>……</p><h2 id="提升"><a href="#提升" class="headerlink" title="提升"></a>提升</h2><p>上面的代码在首次匹配成功后就输出结果了，如果想要得到最后一个能够匹配的下标，该怎么改呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">KMPSearch2</span><span class="params">(String haystack, String needle)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] text = haystack.toCharArray();</span><br><span class="line">        <span class="type">char</span>[] pattern = needle.toCharArray();</span><br><span class="line">        <span class="type">int</span>[] prefix = getPrefix(pattern);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; text.length)&#123;</span><br><span class="line">            <span class="keyword">if</span>(j == pattern.length &amp;&amp; text[i] == pattern[j])&#123;</span><br><span class="line">                <span class="comment">// System.out.println(&quot;Found pattern at &quot; + (i - j));</span></span><br><span class="line">                j = prefix[j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(text[i] == pattern[j])&#123;</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(j != <span class="number">0</span>)&#123;</span><br><span class="line">                    j = prefix[j - <span class="number">1</span>];</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j == pattern.length)&#123;</span><br><span class="line">            <span class="keyword">return</span> i - j;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上就是找到之后，重新开始匹配。</p>]]></content>
    
    
    <summary type="html">著名的KMP算法，模板。</summary>
    
    
    
    <category term="剑指Offer" scheme="https://lazyo.gitee.io/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    <category term="基础算法" scheme="https://lazyo.gitee.io/categories/%E5%89%91%E6%8C%87Offer/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://lazyo.gitee.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>设计链表</title>
    <link href="https://lazyo.gitee.io/p/1261280867/"/>
    <id>https://lazyo.gitee.io/p/1261280867/</id>
    <published>2022-04-24T03:39:31.000Z</published>
    <updated>2022-04-24T07:25:53.424Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><blockquote><p>Leetcode: <a href="https://leetcode-cn.com/problems/design-linked-list/">707.设计链表</a></p></blockquote><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>设计链表的实现。您可以选择使用单链表或双链表。单链表中的节点应该具有两个属性：<code>val</code> 和 <code>next</code>。<code>val</code> 是当前节点的值，next 是指向下一个节点的指针/引用。如果要使用双向链表，则还需要一个属性 <code>prev</code> 以指示链表中的上一个节点。假设链表中的所有节点都是 <code>0-index</code> 的。</p><p>在链表类中实现这些功能：</p><p><code>get(index)</code>：获取链表中第 <code>index</code> 个节点的值。如果索引无效，则返回<code>-1</code>。<br><code>addAtHead(val)</code>：在链表的第一个元素之前添加一个值为 <code>val</code> 的节点。插入后，新节点将成为链表的第一个节点。<br><code>addAtTail(val)</code>：将值为 <code>val</code> 的节点追加到链表的最后一个元素。<br><code>addAtIndex(index,val)</code>：在链表中的第 <code>index</code> 个节点之前添加值为 <code>val</code>  的节点。如果 <code>index</code> 等于链表的长度，则该节点将附加到链表的末尾。如果 <code>index</code> 大于链表长度，则不会插入节点。如果<code>index</code>小于<code>0</code>，则在头部插入节点。<br><code>deleteAtIndex(index)</code>：如果索引 <code>index</code> 有效，则删除链表中的第 <code>index</code> 个节点。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MyLinkedList</span> <span class="variable">linkedList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyLinkedList</span>();</span><br><span class="line">linkedList.addAtHead(<span class="number">1</span>);</span><br><span class="line">linkedList.addAtTail(<span class="number">3</span>);</span><br><span class="line">linkedList.addAtIndex(<span class="number">1</span>,<span class="number">2</span>);   <span class="comment">//链表变为1-&gt; 2-&gt; 3</span></span><br><span class="line">linkedList.get(<span class="number">1</span>);            <span class="comment">//返回2</span></span><br><span class="line">linkedList.deleteAtIndex(<span class="number">1</span>);  <span class="comment">//现在链表是1-&gt; 3</span></span><br><span class="line">linkedList.get(<span class="number">1</span>);            <span class="comment">//返回3</span></span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ul><li>所有<code>val</code>值都在 <code>[1, 1000]</code> 之内。</li><li>操作次数将在  <code>[1, 1000]</code> 之内。</li><li>请不要使用内置的 <code>LinkedList</code> 库。</li></ul><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="类实现的双向链表"><a href="#类实现的双向链表" class="headerlink" title="类实现的双向链表"></a>类实现的双向链表</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Node dummpyTail, dummpyHead;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyLinkedList</span><span class="params">()</span> &#123;</span><br><span class="line">        dummpyHead = <span class="keyword">new</span> <span class="title class_">Node</span>(-<span class="number">1</span>);</span><br><span class="line">        dummpyTail = <span class="keyword">new</span> <span class="title class_">Node</span>(-<span class="number">1</span>);</span><br><span class="line">        dummpyHead.next = dummpyTail;</span><br><span class="line">        dummpyTail.pre = dummpyHead;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= size) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> dummpyHead.next;</span><br><span class="line">        <span class="keyword">while</span>(index-- &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p.val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtHead</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(val);</span><br><span class="line">        newNode.pre = dummpyHead;</span><br><span class="line">        newNode.next = dummpyHead.next;</span><br><span class="line">        dummpyHead.next.pre = newNode;</span><br><span class="line">        dummpyHead.next = newNode;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="comment">// addAtIndex(0,val);</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtTail</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(val);</span><br><span class="line">        dummpyTail.pre.next = newNode;</span><br><span class="line">        newNode.pre = dummpyTail.pre;</span><br><span class="line">        newNode.next = dummpyTail;</span><br><span class="line">        dummpyTail.pre = newNode;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            addAtHead(val);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(index==size)&#123;</span><br><span class="line">            addAtTail(val);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(index &gt; size)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(val); </span><br><span class="line">        <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> dummpyHead.next;</span><br><span class="line">        <span class="keyword">while</span>(index-- &gt;<span class="number">0</span>)&#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        newNode.next = p;</span><br><span class="line">        newNode.pre = p.pre;</span><br><span class="line">        p.pre.next = newNode;</span><br><span class="line">        p.pre = newNode;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt;=size) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> dummpyHead.next;</span><br><span class="line">        <span class="keyword">while</span>(index-- &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        p.pre.next = p.next;</span><br><span class="line">        p.next.pre = p.pre;</span><br><span class="line">        size--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> val;</span><br><span class="line">        <span class="keyword">public</span> Node next, pre;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> val)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.val = val;</span><br><span class="line">            <span class="built_in">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">            <span class="built_in">this</span>.pre = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><p>这种属于双向链表，这里列举一下我容易迷惑的点。</p><p>对链表定义了一个头指针和尾指针的Node变量，在构造函数中对这两个变量进行初始化的时候：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dummpyHead.next = dummpyTail;</span><br><span class="line">dummpyTail.pre = dummpyHead;</span><br></pre></td></tr></table></figure><p>我下意识的想对头节点的<code>pre</code>和尾节点的<code>next</code>也进行相应的赋值。后面看了题解发现别人只初始化了两行，才反应过来如果初始化是四行的话，就属于<strong>双向循环链表</strong>了。</p><p>另一个大概就是题目没看完就直接往下做了，这就导致对<code>addIndex(int index, int val)</code>这个函数参数的取值范围不明确。说来也怪，我对<code>index</code>变量的取值范围有过考虑，看了题目下方的提示（一般变量的范围都会在这里提到）没说，我就以为是正常的范围。写完<code>addAtHead(int val)</code>和<code>addAtTail(int val)</code>后开始写在特定下标插入，我发现这两个函数可以直接调用这个<code>addAtIndex(int index, int val)</code>，于是就先注释掉直接调函数。写完之后测试没问题，就提交了。结果<code>error</code>。</p><p>看别人的题解，为啥会在<code>addAtIndex(int index, int val)</code>这个函数去调头插和尾插的函数。对比了一下逻辑，去看了题目，才发现我之前的写法漏了题目可能会在一个大于<code>size</code>的地方插入节点。</p><h2 id="数组模拟双向链表"><a href="#数组模拟双向链表" class="headerlink" title="数组模拟双向链表"></a>数组模拟双向链表</h2><p>这里因为题目给了操作次数的限制条件，即<strong>操作次数</strong>在<code>[1,1000]</code>之内，可以用数组来模拟。这里直接复制别人的题解。PS:~我还以为数组来做最多用两个数组，结果需要用三个~</p><h3 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h3><p>有时间了再来理解一下数组实现的思想。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">执行用时：7 ms, 在所有 Java 提交中击败了89.35%的用户</span></span><br><span class="line"><span class="comment">内存消耗：42.1 MB, 在所有 Java 提交中击败了5.99%的用户</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">1010</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] e = <span class="keyword">new</span> <span class="title class_">int</span>[N];    <span class="comment">// 节点的值</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] l = <span class="keyword">new</span> <span class="title class_">int</span>[N];    <span class="comment">// 节点的左指针</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] r = <span class="keyword">new</span> <span class="title class_">int</span>[N];    <span class="comment">// 节点的右指针</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">head</span> <span class="operator">=</span> <span class="number">0</span>, tail = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> idx, size;                  <span class="comment">// idx表示用到了哪个节点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyLinkedList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 0表示左端点，1表示右端点</span></span><br><span class="line">        r[head] = tail;</span><br><span class="line">        l[tail] = head;</span><br><span class="line">        idx = <span class="number">2</span>;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="comment">//索引无效</span></span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//查找index映射的下标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> r[head];</span><br><span class="line">        <span class="keyword">while</span>(cur != tail &amp;&amp; --index &gt;= <span class="number">0</span>) cur = r[cur];</span><br><span class="line">        <span class="keyword">return</span> e[cur];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtHead</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        e[idx] = val;</span><br><span class="line">        r[idx] = r[head];</span><br><span class="line">        l[idx] = head;</span><br><span class="line">        l[r[head]] = idx;</span><br><span class="line">        r[head] = idx++;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtTail</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        e[idx] = val;</span><br><span class="line">        r[idx] = tail;</span><br><span class="line">        l[idx] = l[tail];</span><br><span class="line">        r[l[tail]] = idx;</span><br><span class="line">        l[tail] = idx++;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            addAtHead(val);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (index == size) &#123;</span><br><span class="line">            addAtTail(val);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index &gt; size) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//查找到要插入的index映射的下标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> r[head];</span><br><span class="line">        <span class="keyword">while</span>(cur != tail &amp;&amp; --index &gt;= <span class="number">0</span>) cur = r[cur];</span><br><span class="line">        e[idx] = val;</span><br><span class="line">        r[idx] = cur;</span><br><span class="line">        l[idx] = l[cur];</span><br><span class="line">        r[l[cur]] = idx;</span><br><span class="line">        l[cur] = idx++;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//查找到要删除的index映射的下标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> r[head];</span><br><span class="line">        <span class="keyword">while</span>(cur != tail &amp;&amp; --index &gt;= <span class="number">0</span>) cur = r[cur];</span><br><span class="line">        l[r[cur]] = l[cur];</span><br><span class="line">        r[l[cur]] = r[cur];</span><br><span class="line">        size--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">设计链表的实现。可以选择使用单链表或双链表。</summary>
    
    
    
    <category term="剑指Offer" scheme="https://lazyo.gitee.io/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    <category term="设计数据结构" scheme="https://lazyo.gitee.io/categories/%E5%89%91%E6%8C%87Offer/%E8%AE%BE%E8%AE%A1%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="链表" scheme="https://lazyo.gitee.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="设计" scheme="https://lazyo.gitee.io/tags/%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Git相关</title>
    <link href="https://lazyo.gitee.io/p/1167979253/"/>
    <id>https://lazyo.gitee.io/p/1167979253/</id>
    <published>2022-04-23T13:28:59.000Z</published>
    <updated>2022-05-27T11:16:43.422Z</updated>
    
    <content type="html"><![CDATA[<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="用户名和邮箱地址"><a href="#用户名和邮箱地址" class="headerlink" title="用户名和邮箱地址"></a>用户名和邮箱地址</h2><p>git 在本地安装好后需要设置用户名及邮箱，以免团队协作时不知道是谁的提交<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看</span></span><br><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line">git config --global user.name <span class="string">&quot;XXX&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;XXX&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除</span></span><br><span class="line">git config --<span class="built_in">unset</span> --<span class="built_in">local</span> user.name</span><br><span class="line">git config --<span class="built_in">unset</span> --global user.name</span><br></pre></td></tr></table></figure></p><h2 id="建立Git仓库"><a href="#建立Git仓库" class="headerlink" title="建立Git仓库"></a>建立Git仓库</h2><p>已有项目代码纳入Git管理<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> 项目代码所在文件夹</span><br><span class="line">git init</span><br></pre></td></tr></table></figure><br>新建的项目直接用Git进行关联<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git init project_namm</span><br><span class="line"><span class="built_in">cd</span> project_name</span><br></pre></td></tr></table></figure></p><h2 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h2><p>邮箱需要和代码平台的账号邮箱一致，后面直接Enter就行。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C “your_email@youremail.com”</span><br></pre></td></tr></table></figure><br>窗口会出现一个路径，去该目录找到名为<code>id_rsa.pub</code>的文件，在相应代码平台上选择添加密钥，也即SSH Keys，将刚刚文件里面的内容复制上去。</p><h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><p>主要是把新文件或者文件变动的情况添加到暂存区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add readme.md <span class="comment"># 将 readme.md 文件添加到暂存区</span></span><br><span class="line">git add . <span class="comment"># 将当前工作目录的所有文件添加到暂存区</span></span><br><span class="line">git add -u <span class="comment"># 把修改之后的文件（这些文件已经被管理起来了）一次性提交到暂存区</span></span><br></pre></td></tr></table></figure><br>查看工作目录和暂存区的状态<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure></p><blockquote><p>假如bash有颜色显示的话，会看到红色是代表工作目录，绿色代表暂存区。</p></blockquote><p>进行提交，提交的历史会被记录下来<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&#x27;Add readme.md&#x27;</span> <span class="comment"># -m 指定 commit 的信息</span></span><br><span class="line">git commit <span class="comment"># 这时候会跳出一个文本输入界面，让你输入更多的 commit 信息</span></span><br></pre></td></tr></table></figure></p><p>查看远程仓库名称:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure></p><p>更换url<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url origin &lt;new url&gt;</span><br></pre></td></tr></table></figure></p><p>添加远程关联<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin &lt;url&gt;</span><br></pre></td></tr></table></figure></p><p>删除远程关联<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote remove &lt;url&gt;</span><br></pre></td></tr></table></figure></p><p>查看提交历史，也就是版本演进历史<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> <span class="comment"># 只查看当前分支(Head所指的分支)的log情况</span></span><br><span class="line">git <span class="built_in">log</span> --oneline <span class="comment"># 简洁的显示版本更新信息</span></span><br><span class="line">git <span class="built_in">log</span> -n2  <span class="comment"># n2 代表查看最近两次commit历史</span></span><br><span class="line">git <span class="built_in">log</span> -2   <span class="comment"># 2 代表查看最近两次commit历史</span></span><br><span class="line">git <span class="built_in">log</span> -n2 --oneline <span class="comment"># 简洁的显示最近两次的版本更新信息</span></span><br><span class="line">git <span class="built_in">log</span> branch_name <span class="comment"># 后面跟上分支名表示查看该分支的log日志</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">log</span> -all <span class="comment"># 列出所有分支的log</span></span><br><span class="line">git <span class="built_in">log</span> --all --graph <span class="comment"># 以图形化的方式查看</span></span><br><span class="line">git <span class="built_in">log</span> --oneline --all <span class="comment"># 以简洁的方式查看所有分支的log</span></span><br><span class="line">git <span class="built_in">log</span> --oneline --all -n4<span class="comment"># 以简洁的方式查看所有分支的log</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">help</span> <span class="built_in">log</span> <span class="comment"># 以web的方式查看log的帮助文档，等同于</span></span><br><span class="line">git <span class="built_in">help</span> --web <span class="built_in">log</span> <span class="comment"># 和上面那条效果一样 </span></span><br></pre></td></tr></table></figure></p><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>查看分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git branch -v <span class="comment"># 查看本地分支的详细情况</span></span><br><span class="line">git branch -a <span class="comment"># 查看所有分支，包括远端分支，但没有过于详细的信息</span></span><br><span class="line">git branch -av <span class="comment"># 查看所有分支情况</span></span><br><span class="line"></span><br><span class="line">git branch branch_name hash_value <span class="comment"># 创建一个新的分支，基于 hash_value 的这个 commit 创建一个新的分支，hash_value 可以省略，那么默认是基于当前分支的最后一个 commit 创建。</span></span><br><span class="line"></span><br><span class="line">git branch -d branch_name</span><br><span class="line">git branch -D branch_name  <span class="comment"># 这个分支已经有了一些 commit</span></span><br></pre></td></tr></table></figure><br>切换分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git checkout branch_name <span class="comment"># 切换分支</span></span><br><span class="line">git checkout master</span><br><span class="line"></span><br><span class="line">git checkout -b branch_name git_id <span class="comment"># 创建一个新的分支并切换过去，git_id可以是hash_value，也可以是某个分支的名字（分支的名字其实就指向了某个 commit）</span></span><br><span class="line">git checkout -b temp 9ef147d</span><br><span class="line">git checkout -b temp2 master</span><br></pre></td></tr></table></figure></p><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><h3 id="不同commit、分支之间进行比较"><a href="#不同commit、分支之间进行比较" class="headerlink" title="不同commit、分支之间进行比较"></a>不同commit、分支之间进行比较</h3><p>可以直接使用 HEAD，因为 HEAD 实际上指向的是某个 commit 的。同理，比较两个分支的差异其实就是比较两个分支最近 commit 的差异，因为分支名其实就是一个指针，指向的还是分支最近的 commit。</p><p><code>^</code>后面只能跟数字1，一个<code>^</code>就表示往父亲 commit 这边追溯一个，以此类推</p><p><code>~</code>后面跟任何数字都可，同样一个<code>~</code>就表示往父亲 commit 这边追溯一个，以此类推<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">git diff hash_value1 hash_value2 <span class="comment"># hash_value1 对应的 comimit 和 hash_value2 对应的 commit 进行比较</span></span><br><span class="line">git diff hash_value1 hash_value2 -- file_name1 file_name2 <span class="comment"># 在上述基础之上，只比较 file_name1、file_name2 这两个文件</span></span><br><span class="line"></span><br><span class="line">git diff branch_name1 branch_name2 <span class="comment"># 对两个分支进行比较</span></span><br><span class="line">git diff branch_name1 branch_name2 -- file_name1 file_name2</span><br><span class="line"></span><br><span class="line">git diff HEAD HEAD^  <span class="comment"># HEAD 指向的 commit 与该 commit 的父亲 commit 进行比较</span></span><br><span class="line">git diff HEAD HEAD^1 <span class="comment"># 同上</span></span><br><span class="line">git diff HEAD HEAD^^ <span class="comment"># HEAD 指向的 commit 与该 commit 的父亲的父亲 commit 进行比较</span></span><br><span class="line"></span><br><span class="line">git diff HEAD HEAD~  <span class="comment"># HEAD 指向的 commit 与该 commit 的父亲 commit 进行比较</span></span><br><span class="line">git diff HEAD HEAD~1 <span class="comment"># 同上</span></span><br><span class="line">git diff HEAD HEAD~~ <span class="comment"># HEAD 指向的 commit 与该 commit 的父亲的父亲 commit 进行比较</span></span><br><span class="line">git diff HEAD HEAD~2 <span class="comment"># 同上</span></span><br></pre></td></tr></table></figure></p><h3 id="暂存区和-HEAD-做比较"><a href="#暂存区和-HEAD-做比较" class="headerlink" title="暂存区和 HEAD 做比较"></a>暂存区和 HEAD 做比较</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --cached</span><br></pre></td></tr></table></figure><p>比如一开始的话，HEAD 、暂存区和工作目录都是一样的，都是状态A，并且 readme*.md 文件都已经被跟踪起来了。下面我们修改 readme3.md 文件，之后把它 add 到暂存区。然后使用上述命令进行比较，因为 HEAD 中的是历史，还没有被更新，是状态 A，而暂存区是状态 B，所以可以显示出差异。<br><img src="/p/1167979253/暂存区与head比较.jpg" alt="暂存区与head作比较"></p><h3 id="工作目录和暂存区做比较"><a href="#工作目录和暂存区做比较" class="headerlink" title="工作目录和暂存区做比较"></a>工作目录和暂存区做比较</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git diff      <span class="comment"># 对所有文件进行比较</span></span><br><span class="line">git diff -- file_name1 file_name2 <span class="comment"># 对指定文件进行比较</span></span><br></pre></td></tr></table></figure><p>比如一开始的话，HEAD 、暂存区和工作目录都是一样的，都是状态A，并且 readme*.md 文件都已经被跟踪起来了。下面我们修改 readme3.md 文件，但是不 add 到暂存区，然后使用上述命令进行比较，由于readme3.md 是在工作区中已经被更改了，工作区是版本 B，而暂存区还没更新是版本 A，所以进行比较会有如下结果。<br><img src="/p/1167979253/工作目录与暂存区做比较.png" alt="工作目录与暂存区作比较"></p><h1 id="commit常用规范用语"><a href="#commit常用规范用语" class="headerlink" title="commit常用规范用语"></a>commit常用规范用语</h1><p>feat: 新增 feature<br>fix: 修复 bug<br>docs: 仅仅修改了文档，比如 README, CHANGELOG, CONTRIBUTE等等<br>style: 仅仅修改了空格、格式缩进、逗号等等，不改变代码逻辑<br>refactor: 代码重构，没有加新功能或者修复 bug<br>perf: 优化相关，比如提升性能、体验<br>test: 测试用例，包括单元测试、集成测试等<br>chore: 改变构建流程、或者增加依赖库、工具等<br>revert: 回滚到上一个版本</p>]]></content>
    
    
    <summary type="html">Git的常用命令</summary>
    
    
    
    <category term="教程" scheme="https://lazyo.gitee.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="教程" scheme="https://lazyo.gitee.io/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Git" scheme="https://lazyo.gitee.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>磨人的配置问题</title>
    <link href="https://lazyo.gitee.io/p/2268505157/"/>
    <id>https://lazyo.gitee.io/p/2268505157/</id>
    <published>2022-04-23T12:41:20.000Z</published>
    <updated>2022-05-04T13:15:53.554Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>初弄这个博客应该是在去年也就是2021年底我开始弄的，那个时候真的是从零开始，先是找平台，然后找主题，跟着文档挨个配置，后面部署在了码云上面，也能成功访问了。在上面也写过几篇文章，后面就没怎么接触了。</p><p>后来刷题，想到得写写博客记录一下。毕竟“好记性不如烂笔头”，忘了什么、或者刷题时看到一些很巧妙的方法，可以记下来下次直接拿来用。于是又想起了这个博客。</p><p>于是我开始去找之前存放博客源文件的文件夹，怎么也找不到。虽然前一段时间刚刚把系统从Windows11刷回了Windows10，但这并不影响别的盘里面的文件啊。后面我才突然意识到，因为降系统前我习惯性备份文件夹，但是备份到代码这个文件夹时，里面专门放前端的代码的当时文件太多，都是研一做的项目没用了，而且我压缩不过来，所幸就全都删了（而且还是习惯性<code>Shift + delete</code>），根本没想到里面还夹杂着我的博客源文件。</p><p>一整个没了，仅存的是部署在码云上面编译好的静态文件。里面稍微有点用的大概就是头像和背景了吧。</p><h1 id="中序"><a href="#中序" class="headerlink" title="中序"></a>中序</h1><p>于是又重新走了一遍配置的流程，部署上去，虽然还是花了不少时间，但是也能成功访问了。过了几天，因为文章的标题会作为文章链接的一部分，复制地址的时候会转义成一长串，看着很不爽。刚好我看到别人的博客是那种一串数字的，试着搜了一下关键词，还真有解决方法。</p><p>于是照着教程，跟着配置了一下，后面重新生成，本地预览，一切和我预想的一样。接下来的一段时间，我陆续写了几篇文章，都是本地预览。到了写简历的时候，我像之前那样开始走部署的步骤，更新Pages后去访问，傻眼了。<br><img src="/p/2268505157/error.jpg" alt="部署后的页面"></p><p>我以为是我开了代理的原因，用手机访问，也是这个样子。我尝试着去搜索，搜不到类似的情形。前几天第一次发现这个问题，找不到解决方法，也就这样搁置了。</p><h1 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h1><p>今天周六，我又开始跟着这个杠上了。从上午一直到晚上八点多，陆陆续续的吧，期间把配置博客以及部署的一些地方都写了篇文章。</p><p>之后我试着去Butterfly主题作者的电报群问了一下，但没人回复（虽然现在已经解决了）。<br><img src="/p/2268505157/ask.jpg" alt="问问题"></p><p>我问问题一般都有个习惯，除非是网络上真的搜不到，加上自己习惯问之前会把所有情景预想一遍。或许就是这样，我想着。不会是abbrlink的问题吧。我开始搜索和abbrlink有关的关键字，只找到“用了abbrlink之后本地图片无法显示”相关的问题。而且这个我现在都还没完全解决。</p><p>说来也巧，我看到一篇文章配置abbrlink的教程，对方的配置和我的不一样。<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对方正确的</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">p/:abbrlink.html</span></span><br><span class="line"><span class="comment"># 我的</span></span><br><span class="line"><span class="comment"># permalink: p/:abbrlink/</span></span><br></pre></td></tr></table></figure><br>以至于我把部署平台换到了github，部署上去之后，神奇般的成功了…..至于为啥之前本地预览时任何问题都没有，其中的原因我也懒得去深究了。</p><p>人都麻了，写完这篇文章以为这件事就这么解决了，部署上去又是之前的样子，可是我真的啥也没改。后面加群问大佬，改了<code>_config.yml</code>一个地方<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">https://lazyo.gitee.io</span></span><br></pre></td></tr></table></figure></p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>于是我的一天又这么浪费了。完美。</p>]]></content>
    
    
    <summary type="html">一个笔误，我花了差不多一周才找到问题所在...</summary>
    
    
    
    <category term="随笔" scheme="https://lazyo.gitee.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="主题配置" scheme="https://lazyo.gitee.io/tags/%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"/>
    
    <category term="踩坑" scheme="https://lazyo.gitee.io/tags/%E8%B8%A9%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>博客部署</title>
    <link href="https://lazyo.gitee.io/p/1228297440/"/>
    <id>https://lazyo.gitee.io/p/1228297440/</id>
    <published>2022-04-23T08:31:17.000Z</published>
    <updated>2022-04-23T13:34:25.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="创建项目分支"><a href="#创建项目分支" class="headerlink" title="创建项目分支"></a>创建项目分支</h2><p>这里创建两个分支，然后将博客的默认分支更改为sources</p><ul><li>master: 存放Hexo编译生成的静态文件</li><li>sources: 存放源文件，用来备份博客</li></ul><p>首先新建一个代码仓库，仓库名字要和平台的用户名一致。<br><img src="/p/1228297440/新建仓库.jpg" alt="创建仓库"></p><p>创建新的分支</p><p><img src="/p/1228297440/新建sources分支.jpg" alt="新建sources分支"></p><h2 id="本地目录与远程仓库关联"><a href="#本地目录与远程仓库关联" class="headerlink" title="本地目录与远程仓库关联"></a>本地目录与远程仓库关联</h2><p>进入到Hexo目录，执行命令<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git config <span class="literal">--global</span> user.name <span class="string">&quot;lazyo&quot;</span></span><br><span class="line">git config <span class="literal">--global</span> user.email <span class="string">&quot;example@qq.com&quot;</span> </span><br><span class="line">git remote add origin https://gitee.com/lazyo/lazyo.git</span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line">git commit <span class="literal">-m</span> <span class="string">&#x27;hexo source post&#x27;</span></span><br><span class="line">git push origin sources</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">将博客部署到平台上的步骤</summary>
    
    
    
    <category term="教程" scheme="https://lazyo.gitee.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="博客" scheme="https://lazyo.gitee.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Butterfly配置</title>
    <link href="https://lazyo.gitee.io/p/524782646/"/>
    <id>https://lazyo.gitee.io/p/524782646/</id>
    <published>2022-04-23T06:26:01.000Z</published>
    <updated>2022-04-24T07:07:05.266Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><p>找到需要存放博客的一个目录，运行如下命令进行初始化，得到一个hexo的初始目录，该目录即为hexo根目录<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><br>在hexo根目录里面<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone <span class="literal">-b</span> master https://github.com/jerryc127/hexo<span class="literal">-theme-butterfly</span>.git themes/butterfly</span><br></pre></td></tr></table></figure></p><h1 id="应用主题"><a href="#应用主题" class="headerlink" title="应用主题"></a>应用主题</h1><p>修改hexo根目录下面的<code>_config.yml</code>，把主题改为<code>butterfly</code><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><br>在hexo根目录创建一个文件<code>_config.butterfly.yml</code>文件，并把主题目录里面的<code>_config.yml</code>内容复制到<code>_config.butterfly.yml</code>去。</p><blockquote><p><strong>注意</strong>：不要把主题目录的<code>_config.yml</code>删掉，以后只需要在<code>_config.butterfly.yml</code>进行配置。</p></blockquote><h1 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h1><p>如果没有pug以及stylus的渲染器，下载安装<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-renderer-pug</span> hexo<span class="literal">-renderer-stylus</span> <span class="literal">--save</span></span><br></pre></td></tr></table></figure></p><h1 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h1><h2 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h2><p>在hexo博客根目录，输入<code>hexo new page tags</code>, 之后找到<code>source/tags/index.md</code>，修改这个文件，添加配置<code>type: &quot;tags&quot;</code><br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2018-01-05 00:00:00</span><br><span class="line"><span class="section">type: &quot;tags&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure></p><h2 id="分类页"><a href="#分类页" class="headerlink" title="分类页"></a>分类页</h2><p>在hexo博客根目录，输入<code>hexo new page categories</code>, 之后找到<code>source/categories/index.md</code>，修改这个文件，添加配置<code>type: &quot;categories&quot;</code><br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2018-01-05 00:00:00</span><br><span class="line"><span class="section">type: &quot;categories&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure></p><h2 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h2><p>在hexo博客根目录，输入<code>hexo new page about</code>, 之后找到<code>source/about/index.md</code>，修改这个文件，添加配置<code>type: &quot;about&quot;</code><br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: about</span><br><span class="line">date: 2022-04-01 21:37:00</span><br><span class="line"><span class="section">type: &quot;about&quot;</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"><span class="section"># 关于我</span></span><br><span class="line">&#123;% label 我的职业 blue %&#125;</span><br><span class="line">2023届学生，电子信息专业</span><br><span class="line"></span><br><span class="line">&#123;% label 我的兴趣 green %&#125;</span><br><span class="line">就喜欢折腾一些没有用的，稀奇古怪的东西。三分钟热度。</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="404页面"><a href="#404页面" class="headerlink" title="404页面"></a>404页面</h2><p>主题内置了一个简单的404页面，可以在设置中开放</p><blockquote><p>本地预览时，访问出错的网站是不会跳到404页面的，如需本地预览，请访问<code>http://localhost:4000/404.html</code><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># A simple 404 page</span></span><br><span class="line"><span class="attr">error_404:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">subtitle:</span> <span class="string">&quot;頁面沒有找到&quot;</span></span><br><span class="line">  <span class="attr">background:</span> </span><br></pre></td></tr></table></figure></p><h1 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h1><h2 id="Site"><a href="#Site" class="headerlink" title="Site"></a>Site</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">Lazy</span> <span class="string">Blog</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Lazy</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p>Hexo生产博客文章链接时，默认配置<code>permalink: :year/:month/:day/:title/</code>。如果标题中含中文的话，复制URL链接的话中文字符就会是一大串编码字符。如果想为每一篇文章生成唯一ID的话，可以使用hexo-abbrlink或hexo-uuid。这里采用的是hexo-abbrlink。</p></blockquote><p>在博客根目录下安装<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-abbrlink</span> <span class="literal">--save</span></span><br></pre></td></tr></table></figure><br><code>_config.yml</code>中修改配置如下：<strong>就是这里害我部署时坑了个大坑</strong><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">https://gitee.com/lazyo/lazyo</span></span><br><span class="line"><span class="comment"># permalink: p/:abbrlink/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">p/:abbrlink.html</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span> <span class="comment">#support crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">dec</span>   <span class="comment">#support dec(default) and hex</span></span><br></pre></td></tr></table></figure></p><h2 id="文章存放"><a href="#文章存放" class="headerlink" title="文章存放"></a>文章存放</h2><p>新建文章的时候，Hexo默认是将所有文章都存放到<code>source/post</code>目录下，如果文章非常多，会比较凌乱，这里选择将文章按照<code>年:月</code>存放到相应目录下。<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:year/:month/:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br></pre></td></tr></table></figure></p><h2 id="应用主题-1"><a href="#应用主题-1" class="headerlink" title="应用主题"></a>应用主题</h2><p>即上文提到的将主题配置由<code>landscape</code>修改为<code>butterfly</code>。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>这里是将博客部署到码云平台。<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://gitee.com/lazyo/lazyo.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></p><h1 id="config-butterfly-yml"><a href="#config-butterfly-yml" class="headerlink" title="_config.butterfly.yml"></a>_config.butterfly.yml</h1><h2 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h2><p>开启网站顶栏的导航菜单<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">首页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">归档:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="string">分类:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line">  <span class="string">关于:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">far</span> <span class="string">fa-user</span></span><br></pre></td></tr></table></figure></p><h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h2><h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><p>如果不想在别人复制网站内容时，自动在内容后面增加版权信息，修改如下配置<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">copy:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></p><h3 id="代码相关"><a href="#代码相关" class="headerlink" title="代码相关"></a>代码相关</h3><p>代码太长的情况下，显示一部分代码，剩下的部分让其折叠，可以自己选择是否展开。注意，<code>highlight_shrink</code>不能设置为<code>true</code>，否则不管是否设置高度限制，都会被直接折叠，一行代码都不会主动展示。<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight_shrink:</span> <span class="literal">false</span> <span class="comment"># true: shrink the code blocks / false: expand the code blocks | none: expand code blocks and hide the button</span></span><br><span class="line"><span class="attr">highlight_height_limit:</span> <span class="number">200</span> <span class="comment"># unit: px</span></span><br></pre></td></tr></table></figure></p><h3 id="社交图标"><a href="#社交图标" class="headerlink" title="社交图标"></a>社交图标</h3><p>网站个人信息栏下的社交图标信息<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">fab fa-github:</span> <span class="string">https://github.com/0Pluto</span> <span class="string">||</span> <span class="string">Github</span></span><br><span class="line">  <span class="attr">fas fa-envelope:</span> <span class="string">ly.workmail@qq.com</span> <span class="string">||</span> <span class="string">Email</span></span><br></pre></td></tr></table></figure></p><h3 id="网站图标及个人头像"><a href="#网站图标及个人头像" class="headerlink" title="网站图标及个人头像"></a>网站图标及个人头像</h3><p>如果想更换网站标签页上显示的图标，以及网站个人信息页的头像，将涉及到的图片存放在<code>/source/themes/source/img</code>下，而不是<code>/public/img</code>，因为这个目录的文件是执行<code>hexo g</code>命令所生成的。文件存放到主题的目录下后，修改对应的路径即可。</p><h3 id="首页图片"><a href="#首页图片" class="headerlink" title="首页图片"></a>首页图片</h3><p>默认的首页是蓝色纯色背景，这里替换为自己的一个图片，同样，图片需要存放到主题的目录。<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># If the banner of page not setting, it will show the top_img</span></span><br><span class="line"><span class="attr">default_top_img:</span> <span class="string">/img/index_img.png</span></span><br></pre></td></tr></table></figure></p><h3 id="封面"><a href="#封面" class="headerlink" title="封面"></a>封面</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cover:</span></span><br><span class="line">  <span class="comment"># display the cover or not (是否顯示文章封面)</span></span><br><span class="line">  <span class="attr">index_enable:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="文章版权"><a href="#文章版权" class="headerlink" title="文章版权"></a>文章版权</h3><p>博客文章底部默认会有一个类似本文章的版权信息啥的，关闭这个<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_copyright:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></p><h3 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h3><p>将文章日期显示由创建日更改为更新日<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">related_post:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">6</span> <span class="comment"># Number of posts displayed</span></span><br><span class="line">  <span class="attr">date_type:</span> <span class="string">updated</span> <span class="comment"># or created or updated 文章日期顯示創建日或者更新日</span></span><br></pre></td></tr></table></figure></p><h2 id="字数统计"><a href="#字数统计" class="headerlink" title="字数统计"></a>字数统计</h2><p>如果想启用字数统计功能，需要安装插件。在Hexo根目录执行命令<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-wordcount</span> <span class="literal">--save</span></span><br></pre></td></tr></table></figure><br>之后修改主题配置文件<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># wordcount (字數統計)</span></span><br><span class="line"><span class="attr">wordcount:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post_wordcount:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_wordcount:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><h2 id="主页文章节选"><a href="#主页文章节选" class="headerlink" title="主页文章节选"></a>主页文章节选</h2><p>默认是截取文章内容的前500个字符，如果不修改的话，文章标题下的内容看着会非常凌乱。这里设置为自己想展示的内容，也就是说，写文章的时候在顶部增加一个属性，自己将这篇文章的内容概括一下，作为概要。<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">index_post_content:</span></span><br><span class="line">  <span class="attr">method:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">500</span> <span class="comment"># if you set method to 2 or 3, the length need to config</span></span><br></pre></td></tr></table></figure></p><h2 id="分享功能"><a href="#分享功能" class="headerlink" title="分享功能"></a>分享功能</h2><p>将文章底部的分享入口全都关闭<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sharejs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">sites:</span> <span class="string">facebook,twitter,wechat,weibo,qq</span></span><br></pre></td></tr></table></figure></p><h2 id="底部栏"><a href="#底部栏" class="headerlink" title="底部栏"></a>底部栏</h2><p>底部栏有一些信息需要修改<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="attr">owner:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">since:</span> <span class="number">2022</span></span><br><span class="line">  <span class="attr">custom_text:</span></span><br><span class="line">  <span class="comment"># copyright: true # Copyright of theme and framework</span></span><br></pre></td></tr></table></figure></p><h2 id="美化相关"><a href="#美化相关" class="headerlink" title="美化相关"></a>美化相关</h2><p>主页top_img高度<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">index_top_img_height:</span> <span class="string">400px</span></span><br></pre></td></tr></table></figure><br>footer背景<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">footer_bg:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><br>文章背景展示的类似动态磁性丝线<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">canvas_nest:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><br>打字效果<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">activate_power_mode:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><br>页面美化显示<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">beautify:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><br>主页的副标题。即主页下面的打字机效果。<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">subtitle:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Typewriter Effect (打字效果)</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># loop (循環打字)</span></span><br><span class="line">  <span class="attr">loop:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># source 調用第三方服務</span></span><br><span class="line">  <span class="comment"># source: false 關閉調用</span></span><br><span class="line">  <span class="comment"># source: 1  調用一言網的一句話（簡體） https://hitokoto.cn/</span></span><br><span class="line">  <span class="comment"># source: 2  調用一句網（簡體） http://yijuzhan.com/</span></span><br><span class="line">  <span class="comment"># source: 3  調用今日詩詞（簡體） https://www.jinrishici.com/</span></span><br><span class="line">  <span class="comment"># subtitle 會先顯示 source , 再顯示 sub 的內容</span></span><br><span class="line">  <span class="attr">source:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 如果關閉打字效果，subtitle 只會顯示 sub 的第一行文字</span></span><br><span class="line">  <span class="attr">sub:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">不去想太多，是不是会更好</span></span><br></pre></td></tr></table></figure><br>侧边栏。这里只显示涉及到要更改的部分属性。<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aside:</span></span><br><span class="line">  <span class="attr">card_author:</span></span><br><span class="line">    <span class="attr">button:</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://github.com/0Pluto</span></span><br><span class="line">  <span class="attr">card_announcement:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">card_recent_post:</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">2</span> <span class="comment"># if set 0 will show all</span></span><br></pre></td></tr></table></figure><br>网页运行时间<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">runtimeshow:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">publish_date:</span> <span class="number">2022</span><span class="string">/4/1</span> <span class="number">00</span><span class="string">:00:00</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">一些配置Butterfly的步骤</summary>
    
    
    
    <category term="教程" scheme="https://lazyo.gitee.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="主题配置" scheme="https://lazyo.gitee.io/tags/%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
</feed>
