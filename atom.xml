<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lazy Blog</title>
  
  
  <link href="https://0pluto.github.io/atom.xml" rel="self"/>
  
  <link href="https://0pluto.github.io/"/>
  <updated>2022-04-23T11:58:44.283Z</updated>
  <id>https://0pluto.github.io/</id>
  
  <author>
    <name>Lazy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>博客部署</title>
    <link href="https://0pluto.github.io/p/1228297440.html"/>
    <id>https://0pluto.github.io/p/1228297440.html</id>
    <published>2022-04-23T08:31:17.000Z</published>
    <updated>2022-04-23T11:58:44.283Z</updated>
    
    <content type="html"><![CDATA[<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="创建项目分支"><a href="#创建项目分支" class="headerlink" title="创建项目分支"></a>创建项目分支</h2><p>这里创建两个分支，然后将博客的默认分支更改为sources</p><ul><li>master: 存放Hexo编译生成的静态文件</li><li>sources: 存放源文件，用来备份博客</li></ul><p>首先新建一个代码仓库，仓库名字要和平台的用户名一致。<br><img src="/p/1228297440/_posts/2022/04/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2/%E5%88%9B%E5%BB%BA%E4%BB%93%E5%BA%93.jpg" alt="创建仓库"></p><p>创建新的分支</p><p><img src="/p/1228297440/_posts/2022/04/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2/%E6%96%B0%E5%BB%BAsources%E5%88%86%E6%94%AF.jpg" alt="新建sources分支"></p><h2 id="本地目录与远程仓库关联"><a href="#本地目录与远程仓库关联" class="headerlink" title="本地目录与远程仓库关联"></a>本地目录与远程仓库关联</h2><p>进入到Hexo目录，执行命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git config <span class="literal">--global</span> user.name <span class="string">&quot;lazyo&quot;</span></span><br><span class="line">git config <span class="literal">--global</span> user.email <span class="string">&quot;example@qq.com&quot;</span> </span><br><span class="line">git remote add origin https://gitee.com/lazyo/lazyo.git</span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line">git commit <span class="literal">-m</span> <span class="string">&#x27;hexo source post&#x27;</span></span><br><span class="line">git push origin sources</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">将博客部署到平台上的步骤</summary>
    
    
    
    <category term="教程" scheme="https://0pluto.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="博客" scheme="https://0pluto.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Butterfly配置</title>
    <link href="https://0pluto.github.io/p/524782646.html"/>
    <id>https://0pluto.github.io/p/524782646.html</id>
    <published>2022-04-23T06:26:01.000Z</published>
    <updated>2022-04-23T08:36:52.102Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><p>找到需要存放博客的一个目录，运行如下命令进行初始化，得到一个hexo的初始目录，该目录即为hexo根目录</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>在hexo根目录里面</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone <span class="literal">-b</span> master https://github.com/jerryc127/hexo<span class="literal">-theme-butterfly</span>.git themes/butterfly</span><br></pre></td></tr></table></figure><h1 id="应用主题"><a href="#应用主题" class="headerlink" title="应用主题"></a>应用主题</h1><p>修改hexo根目录下面的<code>_config.yml</code>，把主题改为<code>butterfly</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><p>在hexo根目录创建一个文件<code>_config.butterfly.yml</code>文件，并把主题目录里面的<code>_config.yml</code>内容复制到<code>_config.butterfly.yml</code>去。</p><blockquote><p><strong>注意</strong>：不要把主题目录的<code>_config.yml</code>删掉，以后只需要在<code>_config.butterfly.yml</code>进行配置。</p></blockquote><h1 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h1><p>如果没有pug以及stylus的渲染器，下载安装</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-renderer-pug</span> hexo<span class="literal">-renderer-stylus</span> <span class="literal">--save</span></span><br></pre></td></tr></table></figure><h1 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h1><h2 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h2><p>在hexo博客根目录，输入<code>hexo new page tags</code>, 之后找到<code>source/tags/index.md</code>，修改这个文件，添加配置<code>type: &quot;tags&quot;</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2018-01-05 00:00:00</span><br><span class="line"><span class="section">type: &quot;tags&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><h2 id="分类页"><a href="#分类页" class="headerlink" title="分类页"></a>分类页</h2><p>在hexo博客根目录，输入<code>hexo new page categories</code>, 之后找到<code>source/categories/index.md</code>，修改这个文件，添加配置<code>type: &quot;categories&quot;</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2018-01-05 00:00:00</span><br><span class="line"><span class="section">type: &quot;categories&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><h2 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h2><p>在hexo博客根目录，输入<code>hexo new page about</code>, 之后找到<code>source/about/index.md</code>，修改这个文件，添加配置<code>type: &quot;about&quot;</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: about</span><br><span class="line">date: 2022-04-01 21:37:00</span><br><span class="line"><span class="section">type: &quot;about&quot;</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"><span class="section"># 关于我</span></span><br><span class="line">&#123;% label 我的职业 blue %&#125;</span><br><span class="line">2023届学生，电子信息专业</span><br><span class="line"></span><br><span class="line">&#123;% label 我的兴趣 green %&#125;</span><br><span class="line">就喜欢折腾一些没有用的，稀奇古怪的东西。三分钟热度。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="404页面"><a href="#404页面" class="headerlink" title="404页面"></a>404页面</h2><p>主题内置了一个简单的404页面，可以在设置中开放</p><blockquote><p>本地预览时，访问出错的网站是不会跳到404页面的，如需本地预览，请访问<code>http://localhost:4000/404.html</code></p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># A simple 404 page</span></span><br><span class="line"><span class="attr">error_404:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">subtitle:</span> <span class="string">&quot;頁面沒有找到&quot;</span></span><br><span class="line">  <span class="attr">background:</span> </span><br></pre></td></tr></table></figure><h1 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h1><h2 id="Site"><a href="#Site" class="headerlink" title="Site"></a>Site</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">Lazy</span> <span class="string">Blog</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Lazy</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p>Hexo生产博客文章链接时，默认配置<code>permalink: :year/:month/:day/:title/</code>。如果标题中含中文的话，复制URL链接的话中文字符就会是一大串编码字符。如果想为每一篇文章生成唯一ID的话，可以使用hexo-abbrlink或hexo-uuid。这里采用的是hexo-abbrlink。</p><p>在博客根目录下安装</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-abbrlink</span> <span class="literal">--save</span></span><br></pre></td></tr></table></figure><p><code>_config.yml</code>中修改配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">https://gitee.com/lazyo/lazyo</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">p/:abbrlink/</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span> <span class="comment">#support crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">dec</span>   <span class="comment">#support dec(default) and hex</span></span><br></pre></td></tr></table></figure><h2 id="文章存放"><a href="#文章存放" class="headerlink" title="文章存放"></a>文章存放</h2><p>新建文章的时候，Hexo默认是将所有文章都存放到<code>source/post</code>目录下，如果文章非常多，会比较凌乱，这里选择将文章按照<code>年:月</code>存放到相应目录下。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:year/:month/:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br></pre></td></tr></table></figure><h2 id="应用主题-1"><a href="#应用主题-1" class="headerlink" title="应用主题"></a>应用主题</h2><p>即上文提到的将主题配置由<code>landscape</code>修改为<code>butterfly</code>。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>这里是将博客部署到码云平台。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://gitee.com/lazyo/lazyo.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h1 id="config-butterfly-yml"><a href="#config-butterfly-yml" class="headerlink" title="_config.butterfly.yml"></a>_config.butterfly.yml</h1><h2 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h2><p>开启网站顶栏的导航菜单</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">首页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">归档:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="string">分类:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line">  <span class="string">关于:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">far</span> <span class="string">fa-user</span></span><br></pre></td></tr></table></figure><h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h2><h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><p>如果不想在别人复制网站内容时，自动在内容后面增加版权信息，修改如下配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">copy:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="社交图标"><a href="#社交图标" class="headerlink" title="社交图标"></a>社交图标</h3><p>网站个人信息栏下的社交图标信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">fab fa-github:</span> <span class="string">https://github.com/0Pluto</span> <span class="string">||</span> <span class="string">Github</span></span><br><span class="line">  <span class="attr">fas fa-envelope:</span> <span class="string">ly.workmail@qq.com</span> <span class="string">||</span> <span class="string">Email</span></span><br></pre></td></tr></table></figure><h3 id="网站图标及个人头像"><a href="#网站图标及个人头像" class="headerlink" title="网站图标及个人头像"></a>网站图标及个人头像</h3><p>如果想更换网站标签页上显示的图标，以及网站个人信息页的头像，将涉及到的图片存放在<code>/source/themes/source/img</code>下，而不是<code>/public/img</code>，因为这个目录的文件是执行<code>hexo g</code>命令所生成的。文件存放到主题的目录下后，修改对应的路径即可。</p><h3 id="首页图片"><a href="#首页图片" class="headerlink" title="首页图片"></a>首页图片</h3><p>默认的首页是蓝色纯色背景，这里替换为自己的一个图片，同样，图片需要存放到主题的目录。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># If the banner of page not setting, it will show the top_img</span></span><br><span class="line"><span class="attr">default_top_img:</span> <span class="string">/img/index_img.png</span></span><br></pre></td></tr></table></figure><h3 id="封面"><a href="#封面" class="headerlink" title="封面"></a>封面</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cover:</span></span><br><span class="line">  <span class="comment"># display the cover or not (是否顯示文章封面)</span></span><br><span class="line">  <span class="attr">index_enable:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="文章版权"><a href="#文章版权" class="headerlink" title="文章版权"></a>文章版权</h3><p>博客文章底部默认会有一个类似本文章的版权信息啥的，关闭这个</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_copyright:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h3><p>将文章日期显示由创建日更改为更新日</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">related_post:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">6</span> <span class="comment"># Number of posts displayed</span></span><br><span class="line">  <span class="attr">date_type:</span> <span class="string">updated</span> <span class="comment"># or created or updated 文章日期顯示創建日或者更新日</span></span><br></pre></td></tr></table></figure><h2 id="字数统计"><a href="#字数统计" class="headerlink" title="字数统计"></a>字数统计</h2><p>如果想启用字数统计功能，需要安装插件。在Hexo根目录执行命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-wordcount</span> <span class="literal">--save</span></span><br></pre></td></tr></table></figure><p>之后修改主题配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># wordcount (字數統計)</span></span><br><span class="line"><span class="attr">wordcount:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post_wordcount:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_wordcount:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="主页文章节选"><a href="#主页文章节选" class="headerlink" title="主页文章节选"></a>主页文章节选</h2><p>默认是截取文章内容的前500个字符，如果不修改的话，文章标题下的内容看着会非常凌乱。这里设置为自己想展示的内容，也就是说，写文章的时候在顶部增加一个属性，自己将这篇文章的内容概括一下，作为概要。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">index_post_content:</span></span><br><span class="line">  <span class="attr">method:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">500</span> <span class="comment"># if you set method to 2 or 3, the length need to config</span></span><br></pre></td></tr></table></figure><h2 id="分享功能"><a href="#分享功能" class="headerlink" title="分享功能"></a>分享功能</h2><p>将文章底部的分享入口全都关闭</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sharejs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">sites:</span> <span class="string">facebook,twitter,wechat,weibo,qq</span></span><br></pre></td></tr></table></figure><h2 id="底部栏"><a href="#底部栏" class="headerlink" title="底部栏"></a>底部栏</h2><p>底部栏有一些信息需要修改</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="attr">owner:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">since:</span> <span class="number">2022</span></span><br><span class="line">  <span class="attr">custom_text:</span></span><br><span class="line">  <span class="comment"># copyright: true # Copyright of theme and framework</span></span><br></pre></td></tr></table></figure><h2 id="美化相关"><a href="#美化相关" class="headerlink" title="美化相关"></a>美化相关</h2><p>主页top_img高度</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">index_top_img_height:</span> <span class="string">400px</span></span><br></pre></td></tr></table></figure><p>footer背景</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">footer_bg:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>文章背景展示的类似动态磁性丝线</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">canvas_nest:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>打字效果</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">activate_power_mode:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>页面美化显示</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">beautify:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>主页的副标题。即主页下面的打字机效果。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">subtitle:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Typewriter Effect (打字效果)</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># loop (循環打字)</span></span><br><span class="line">  <span class="attr">loop:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># source 調用第三方服務</span></span><br><span class="line">  <span class="comment"># source: false 關閉調用</span></span><br><span class="line">  <span class="comment"># source: 1  調用一言網的一句話（簡體） https://hitokoto.cn/</span></span><br><span class="line">  <span class="comment"># source: 2  調用一句網（簡體） http://yijuzhan.com/</span></span><br><span class="line">  <span class="comment"># source: 3  調用今日詩詞（簡體） https://www.jinrishici.com/</span></span><br><span class="line">  <span class="comment"># subtitle 會先顯示 source , 再顯示 sub 的內容</span></span><br><span class="line">  <span class="attr">source:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 如果關閉打字效果，subtitle 只會顯示 sub 的第一行文字</span></span><br><span class="line">  <span class="attr">sub:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">不去想太多，是不是会更好</span></span><br></pre></td></tr></table></figure><p>侧边栏。这里只显示涉及到要更改的部分属性。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aside:</span></span><br><span class="line">  <span class="attr">card_author:</span></span><br><span class="line">    <span class="attr">button:</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://github.com/0Pluto</span></span><br><span class="line">  <span class="attr">card_announcement:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">card_recent_post:</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">2</span> <span class="comment"># if set 0 will show all</span></span><br></pre></td></tr></table></figure><p>网页运行时间</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">runtimeshow:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">publish_date:</span> <span class="number">2022</span><span class="string">/4/1</span> <span class="number">00</span><span class="string">:00:00</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">一些配置Butterfly的步骤</summary>
    
    
    
    <category term="教程" scheme="https://0pluto.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="主题配置" scheme="https://0pluto.github.io/tags/%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>基础数据结构的使用</title>
    <link href="https://0pluto.github.io/p/186303481.html"/>
    <id>https://0pluto.github.io/p/186303481.html</id>
    <published>2022-04-11T11:18:18.000Z</published>
    <updated>2022-04-23T08:14:33.693Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="数组声明定义的语法"><a href="#数组声明定义的语法" class="headerlink" title="数组声明定义的语法"></a>数组声明定义的语法</h2><p>数组声明格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span>[] arrayRefVar;   <span class="comment">// 首选的方法</span></span><br><span class="line"><span class="type">double</span> arrayRefVar[];  <span class="comment">// 效果相同，但不是首选方法</span></span><br></pre></td></tr></table></figure><p>数组的定义，使用<code>new</code>操作符：<code>数据类型[]</code> <code>数组名</code> &#x3D; <code>new</code> <code>数据类型[元素个数或数组长度]</code></p><ol><li><p>动态初始化<br>构建方法为创建一个int类型引用赋值给number变量 元素的值可以更改。没有被赋值的元素为默认值，称为隐式初始化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] number = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];<span class="comment">//单独定义前必须先声明 [2]内为数组的长度</span></span><br><span class="line"><span class="type">int</span>[<span class="number">0</span>] = <span class="number">1</span>;<span class="comment">//赋值给元素索引0 数组的第一个数据</span></span><br></pre></td></tr></table></figure></li><li><p>静态初始化<br>把包含元素的一组数据赋值给int数据类型的number变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] number = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;<span class="comment">//声明和定义用一段语句来完成</span></span><br></pre></td></tr></table></figure></li><li><p>Java支持同时使用静态初始化和动态初始化，如下面的代码就是错误的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br></pre></td></tr></table></figure></li></ol><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><p>Java语言采用下面的代码来定义二维数组，但它的实质还是一维数组， 只是其数组元素也是引用，数组元素里保存的引用指向一维数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>][];</span><br></pre></td></tr></table></figure><h2 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h2><p><code>Arrays</code>是操作数组的一个工具类，位于<code>java.util</code>包中。</p><ol><li><p><code>Arrays.fill(Object[ ] array, Object obj)</code> 用指定元素填充整个数组(替换数组原元素)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">Arrays.fill(arr, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.println(arr[i]);<span class="comment">//[5,5,5,5]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Arrays.sort(Object [ ]arr)</code> 对传入数组进行递增排序，字符则按照ASCII进行排序(不区分大小写)</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[] = &#123;<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line"><span class="type">char</span> nums[] = &#123;<span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;o&#x27;</span>&#125;;</span><br><span class="line">Arrays.sort(nums);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">    System.out.println(nums[i]);<span class="comment">//[a,c,n,o]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.println(arr[i]);<span class="comment">//[2,3,4,5]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Arrays.sort(Object [ ]arr,int start,int end)</code> 对区间内的元素进行递增排序</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[] = &#123;<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">Arrays.sort(arr, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.println(arr[i]);<span class="comment">//[2，5，3，4]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Arrays.equal(Object []arr,Object []nums)</code> 判断两个数组是否相等，实际上比较的是两个数组的哈希值</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> arr[] = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;C&#x27;</span>&#125;;</span><br><span class="line"><span class="type">char</span> nums[] = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>&#125;;</span><br><span class="line">System.out.println(Arrays.equals(arr, nums));<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> arr[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span> nums[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">System.out.println(Arrays.equals(arr, nums));<span class="comment">//true</span></span><br></pre></td></tr></table></figure></li><li><p><code>Array.hashCode(Object []arr)</code> 返回数组的哈希值</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] data = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">System.out.println(Arrays.hashCode(data)); <span class="comment">// 30817</span></span><br></pre></td></tr></table></figure></li><li><p><code>Arrays.copyOf(Object [])</code> 拷贝数组，其内部调用了 System.arraycopy() 方法，从下标0开始，如果超过原数组长度，会用null进行填充。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] data1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] data2 = Arrays.copyOf(data1, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; data2.length; i++) &#123;</span><br><span class="line">    System.out.println(data2[i]); <span class="comment">// [1, 2]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span>[] data3 = Arrays.copyOf(data1, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; data3.length; i++) &#123;</span><br><span class="line">    System.out.println(data3[i]); <span class="comment">// [1, 2, 3, 4, null]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Arrays.copyOfRange(T[] original, int from, int to)</code> 拷贝数组，指定起始位置和结束位置，如果超过原数组长度，会用null进行填充</p></li><li><p><code>Arrays.toString(Object []arr)</code> 将数组中的内容全部打印出来</p></li><li><p><code>Arrays.binarySearch(Object []arr,T ans)</code> 二分查找法找指定元素的索引值(数组一定是排好序的，否则会出错。找到元素，只会返回最后一个位置)</p></li></ol><h1 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h1><h2 id="一些方法"><a href="#一些方法" class="headerlink" title="一些方法"></a>一些方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对于一个列表ArrayList&lt;String&gt; wordList;</span></span><br><span class="line"><span class="comment">// 找到某个单词在列表中的下标</span></span><br><span class="line"><span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> wordList.indexOf(word);</span><br><span class="line"><span class="comment">// 列表是否存在某个单词</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> wordList.contains(word);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h2><h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">iterate</span><span class="params">(ListNode head)</span>&#123;</span><br><span class="line">    ListNode prev=<span class="literal">null</span>;</span><br><span class="line">    ListNode curr=head;</span><br><span class="line">    <span class="keyword">while</span>(curr!=<span class="literal">null</span>)&#123;</span><br><span class="line">        ListNode next=curr.next;   <span class="comment">//curr存储当前节点的下一个节点</span></span><br><span class="line">        curr.next=prev;   <span class="comment">//curr的下一个节点指向prev</span></span><br><span class="line">        prev=curr;        <span class="comment">//</span></span><br><span class="line">        curr=next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prev;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">recursion</span><span class="params">(ListNode head)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="literal">null</span> || head.next == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">new_head</span> <span class="operator">=</span> recursion(head.next);</span><br><span class="line">    head.next.next = head;</span><br><span class="line">    head.next = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> new_head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链表的中间结点"><a href="#链表的中间结点" class="headerlink" title="链表的中间结点"></a>链表的中间结点</h2><p>当结点个数为偶数时：slow结点落在靠左的中间结点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head, fast = head;</span><br><span class="line"><span class="keyword">while</span>(fast.next!=<span class="literal">null</span> &amp;&amp; fast.next.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">    slow = slow.next;</span><br><span class="line">    fast = fast.next.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当结点的个数为奇数时，slow结点落在靠右的中间结点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head, fast = head;</span><br><span class="line"><span class="keyword">while</span>(fast!=<span class="literal">null</span> &amp;&amp; fast.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">    slow = slow.next;</span><br><span class="line">    fast = fast.next.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">刷题时需要涉及到的一些Java中常见数组、链表、队列、栈等的使用</summary>
    
    
    
    <category term="剑指Offer" scheme="https://0pluto.github.io/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    <category term="小技巧" scheme="https://0pluto.github.io/categories/%E5%89%91%E6%8C%87Offer/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="数据结构" scheme="https://0pluto.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>二分搜索</title>
    <link href="https://0pluto.github.io/p/2561891005.html"/>
    <id>https://0pluto.github.io/p/2561891005.html</id>
    <published>2022-04-09T08:17:04.000Z</published>
    <updated>2022-04-23T08:14:33.686Z</updated>
    
    <content type="html"><![CDATA[<p>二分查找的核心就是找到具有单调性的正确查找对象。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;二分查找的核心就是找到具有单调性的正确查找对象。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="剑指Offer" scheme="https://0pluto.github.io/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    <category term="常见题型" scheme="https://0pluto.github.io/categories/%E5%89%91%E6%8C%87Offer/%E5%B8%B8%E8%A7%81%E9%A2%98%E5%9E%8B/"/>
    
    
    <category term="算法" scheme="https://0pluto.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="二分搜索" scheme="https://0pluto.github.io/tags/%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>搜索算法</title>
    <link href="https://0pluto.github.io/p/67234334.html"/>
    <id>https://0pluto.github.io/p/67234334.html</id>
    <published>2022-04-09T03:01:37.000Z</published>
    <updated>2022-04-23T08:14:33.704Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二分搜索"><a href="#二分搜索" class="headerlink" title="二分搜索"></a>二分搜索</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">binary_search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length - <span class="number">1</span>; </span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>; </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] == target) &#123;</span><br><span class="line">            <span class="comment">// 直接返回</span></span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 直接返回</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">left_bound</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">            <span class="comment">// 别返回，锁定左侧边界</span></span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 最后要检查 left 越界的情况</span></span><br><span class="line">    <span class="keyword">if</span> (left &gt;= nums.length || nums[left] != target) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">right_bound</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">            <span class="comment">// 别返回，锁定右侧边界</span></span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 最后要检查 right 越界的情况</span></span><br><span class="line">    <span class="keyword">if</span> (right &lt; <span class="number">0</span> || nums[right] != target) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">常见的搜索算法</summary>
    
    
    
    <category term="剑指Offer" scheme="https://0pluto.github.io/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    <category term="基础算法" scheme="https://0pluto.github.io/categories/%E5%89%91%E6%8C%87Offer/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="搜索" scheme="https://0pluto.github.io/tags/%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>解题过程中的小技巧</title>
    <link href="https://0pluto.github.io/p/4265691309.html"/>
    <id>https://0pluto.github.io/p/4265691309.html</id>
    <published>2022-04-09T02:43:59.000Z</published>
    <updated>2022-04-23T08:14:33.700Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础数据操作"><a href="#基础数据操作" class="headerlink" title="基础数据操作"></a>基础数据操作</h1><h2 id="Java两整数相除向上取整"><a href="#Java两整数相除向上取整" class="headerlink" title="Java两整数相除向上取整"></a>Java两整数相除向上取整</h2><p>来源：<a href="https://leetcode-cn.com/problems/minimum-speed-to-arrive-on-time/">1870.准时到达的列车最小时速</a></p><ol><li>添加三目运算符<br>如果<code>x</code>可以整除<code>y</code>,就将<code>x/y</code>的结果加<code>0</code>,否则就加<code>1</code>。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = x / y + (x % y != <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>);</span><br></pre></td></tr></table></figure></li><li>使用<code>ceil</code>函数<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = (<span class="type">int</span>)Math.ceil((<span class="type">double</span>)x/y);</span><br><span class="line"><span class="comment">// 另一种</span></span><br><span class="line">result = (<span class="type">int</span>)Math.ceil(x * <span class="number">1.0</span> / y);</span><br></pre></td></tr></table></figure></li><li>其他逻辑<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = (x + y - <span class="number">1</span>) / y;</span><br></pre></td></tr></table></figure>这种方式为什么可以达到向上取整的效果呢，为什么x要加y - 1？。就是x不能整除y余数肯定在1到y - 1之间，从中取出1给y - 1，使得被除数增加了一个y，进而商会增加1，余数部分为0到y - 2是会被舍去的。<h2 id="位运算求中点"><a href="#位运算求中点" class="headerlink" title="位运算求中点"></a>位运算求中点</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 如果是偶数个数，例如0 1 2 3，那么中点是靠近右边的</span></span><br><span class="line"><span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 如果是偶数个数，例如0 1 2 3，那么中点是靠近左边的</span></span><br></pre></td></tr></table></figure><h2 id="访问网格的相邻位置"><a href="#访问网格的相邻位置" class="headerlink" title="访问网格的相邻位置"></a>访问网格的相邻位置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设网格为int[][]grid</span></span><br><span class="line"><span class="type">int</span>[] dx = &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,-<span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] dy = &#123;<span class="number">0</span>,<span class="number">1</span>,-<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">3</span>, y = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">nx</span> <span class="operator">=</span> x + dx[i], ny = y + dy[i];</span><br><span class="line">    <span class="keyword">if</span>(nx &gt;= <span class="number">0</span> &amp;&amp; nx &lt; grid.length &amp;&amp; ny &gt;= <span class="number">0</span> &amp;&amp; ny &lt; grid[<span class="number">0</span>].length)&#123;</span><br><span class="line">        <span class="comment">// (nx,ny)是(x,y)的四个相邻坐标，接下来就可以根据具体要求对这四个坐标进行操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h1 id="标记访问"><a href="#标记访问" class="headerlink" title="标记访问"></a>标记访问</h1>有时候需要标记某个节点是否被访问过，如有12个节点，可以用<strong>二进制表示长度为32的<code>int</code>的低12位来代指是否被访问过</strong>。比如$(000…0101)_2$代表编号为0和编号为2的节点已经被访问过，而编号为1的节点尚未被访问。</li></ol><p>假设变量<code>state</code>存放了当前点的访问状态，当我们需要检查编号 为x的点是否被访问过时，可以使用位运算<code>a = (state &gt;&gt; x) &amp; 1</code>，来获取<code>state</code>中x位的进制表示，如果<code>a</code>的值为1表示编号为x的节点已经被访问，如果为0则表示未被访问。</p><p>同理，当我们需要将编号为x的节点标记被访问的话，可以使用位运算<code>state | (1 &lt;&lt; x)</code>来实现。</p>]]></content>
    
    
    <summary type="html">在做题过程中，算是一些处理中的技巧或我不知道的做法</summary>
    
    
    
    <category term="剑指Offer" scheme="https://0pluto.github.io/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    <category term="小技巧" scheme="https://0pluto.github.io/categories/%E5%89%91%E6%8C%87Offer/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="技巧" scheme="https://0pluto.github.io/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>基础排序算法</title>
    <link href="https://0pluto.github.io/p/336169982.html"/>
    <id>https://0pluto.github.io/p/336169982.html</id>
    <published>2022-04-02T12:27:39.000Z</published>
    <updated>2022-04-23T08:14:33.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><p>刷LeetCode刷不下去了，按标签刷又是看很久没思路，担心自己走不必要的弯路，于是在Github上找了个仓库，跟着里面的先把《剑指Offer》的题刷一遍。在这之前，先稳固一下最基础的这些排序算法。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><img src="https://s3.bmp.ovh/imgs/2022/04/04/0da78d49ba17df86.png" alt="算法排序分类"><br><img src="https://s3.bmp.ovh/imgs/2022/04/04/6cbd0b60569cc253.png" alt="时间复杂度分析"></p><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><h3 id="排序思想"><a href="#排序思想" class="headerlink" title="排序思想"></a>排序思想</h3><p>冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>这个排序算法我是隐约有印象的，双重循环+挨个比较再交换。于是写了如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &gt; arr[j]) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">                arr[i] = arr[j];</span><br><span class="line">                arr[j] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">原始数组 [5, 8, 6, 3, 9, 2, 1, 7]</span></span><br><span class="line"><span class="comment">第1次排序[1, 8, 6, 5, 9, 3, 2, 7]</span></span><br><span class="line"><span class="comment">第2次排序[1, 2, 8, 6, 9, 5, 3, 7]</span></span><br><span class="line"><span class="comment">第3次排序[1, 2, 3, 8, 9, 6, 5, 7]</span></span><br><span class="line"><span class="comment">第4次排序[1, 2, 3, 5, 9, 8, 6, 7]</span></span><br><span class="line"><span class="comment">第5次排序[1, 2, 3, 5, 6, 9, 8, 7]</span></span><br><span class="line"><span class="comment">第6次排序[1, 2, 3, 5, 6, 7, 9, 8]</span></span><br><span class="line"><span class="comment">第7次排序[1, 2, 3, 5, 6, 7, 8, 9]</span></span><br><span class="line"><span class="comment">第8次排序[1, 2, 3, 5, 6, 7, 8, 9]</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure><p>我写的这份代码，看似好像是实现了排序，每一轮都有一个元素被放置在了正确的位置上。但是细想下来，这样并不是“挨个比较再进行交换”，或者更准确的说是“挨个比较相邻的两个元素，根据大小决定是否要进行交换”。</p><p>于是看了正确的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bubbleSort2</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j + <span class="number">1</span> &lt; arr.length - i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">原始数组 [5, 8, 6, 3, 9, 2, 1, 7]</span></span><br><span class="line"><span class="comment">第1次排序[5, 6, 3, 8, 2, 1, 7, 9]</span></span><br><span class="line"><span class="comment">第2次排序[5, 3, 6, 2, 1, 7, 8, 9]</span></span><br><span class="line"><span class="comment">第3次排序[3, 5, 2, 1, 6, 7, 8, 9]</span></span><br><span class="line"><span class="comment">第4次排序[3, 2, 1, 5, 6, 7, 8, 9]</span></span><br><span class="line"><span class="comment">第5次排序[2, 1, 3, 5, 6, 7, 8, 9]</span></span><br><span class="line"><span class="comment">第6次排序[1, 2, 3, 5, 6, 7, 8, 9]</span></span><br><span class="line"><span class="comment">第7次排序[1, 2, 3, 5, 6, 7, 8, 9]</span></span><br><span class="line"><span class="comment">第8次排序[1, 2, 3, 5, 6, 7, 8, 9]</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure><p>我们注意到，经过第6次排序之后，数组就已经被正确排序了。可是算法还会继续循环，这其实是没有必要的。这种还有一种改进的写法，设置一个标志位，来记录此次排序是否有元素发生了交换，如果发生交换，就继续循环。如果一次遍历当中没有发生交换，说明已经排好序了。<strong>冒泡排序的特点是每次排序都会有一个元素被正确放置。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bubbleSort2</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">hasChange</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        hasChange = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j + <span class="number">1</span> &lt; arr.length - i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                hasChange = <span class="literal">true</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!hasChange) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>冒泡排序最坏时间复杂度为$O(n^2)$，最优时间复杂度为$O(n)$，这种情况是已经升序的情况，平均时间复杂度为$O(n^2)$</p><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><h3 id="排序思想-1"><a href="#排序思想-1" class="headerlink" title="排序思想"></a>排序思想</h3><p>快速排序是由冒泡排序改进而得的，基本思想就是在待排序的n个元素中任取一个元素(通常取第一个元素)作为基准，把该元素放入适当位置后，数据序列被此元素划分为两个部分，比这个基准小的元素放到这个基准的前面，大的放到后面，这个过程称为一趟快速排序(即一趟划分)。然后再对刚刚产生的两个部分进行同样的操作(递归)，直到每部分只有一个元素或者为空。</p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (left &gt;= right) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left, j = right;</span><br><span class="line">    <span class="type">int</span> <span class="variable">pivot</span> <span class="operator">=</span> arr[left];</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[j] &gt; pivot) j--;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j)</span><br><span class="line">            arr[i++] = arr[j];</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[i] &lt; pivot) i++;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j)</span><br><span class="line">            arr[j--] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    arr[i] = pivot;</span><br><span class="line">    quickSort(arr, left, i - <span class="number">1</span>);</span><br><span class="line">    quickSort(arr, i + <span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><ul><li>时间复杂度最坏情况下为$O(n^2)$，平均复杂度为$n*log(n)$</li><li>不稳定</li></ul><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><h3 id="排序思想-2"><a href="#排序思想-2" class="headerlink" title="排序思想"></a>排序思想</h3><p>把各个元素先分为两个组，最开始的时候，第一个的元素为一组(有序组)，其他的元素(按索引顺序排列即无序组)，然后对无序组进行遍历，把每一个元素按顺序插入到有序组里。</p><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">insertVal</span> <span class="operator">=</span> <span class="number">0</span>, insertIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        insertVal = arr[i];</span><br><span class="line">        insertIndex = i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (insertIndex &gt;= <span class="number">0</span> &amp;&amp; insertVal &lt; arr[insertIndex]) &#123;</span><br><span class="line">            arr[insertIndex + <span class="number">1</span>] = arr[insertIndex];</span><br><span class="line">            insertIndex--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (insertIndex != i - <span class="number">1</span>) &#123;</span><br><span class="line">            arr[insertIndex + <span class="number">1</span>] = insertVal;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂度分析-2"><a href="#复杂度分析-2" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><ul><li>最好情况：当前元素为升序，时间复杂度为$O(n)$</li><li>最坏情况：当前元素为降序，时间复杂度为$O(n)$</li><li>空间复杂度：$O(1)$</li><li>稳定排序</li></ul><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p>首先，找到数据中最小的一个元素，将其和数组的第一个元素交换位置（如果第一个元素就是最小元素则和自己交换）。其次，在剩下的元素种找到最小的元素，和数组中的第二个元素交换位置。</p><h3 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">minIndex</span> <span class="operator">=</span> i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[minIndex]) &#123;</span><br><span class="line">                minIndex = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> arr[minIndex];</span><br><span class="line">        arr[minIndex] = arr[i];</span><br><span class="line">        arr[i] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂度分析-3"><a href="#复杂度分析-3" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><ul><li>无论初始数据序列是否有序，两个for循环一定会执行。因此最好、最坏、平均算法时间复杂度都为$O(n^2)$</li><li>空间复杂度：$O(1)$</li><li>非稳定排序<ul><li>排序前：<code>5*,5,1,7</code></li><li>排序后：<code>1,5,5*,7</code></li></ul></li></ul>]]></content>
    
    
    <summary type="html">常见的排序算法</summary>
    
    
    
    <category term="剑指Offer" scheme="https://0pluto.github.io/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    <category term="基础算法" scheme="https://0pluto.github.io/categories/%E5%89%91%E6%8C%87Offer/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="排序" scheme="https://0pluto.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>单调栈</title>
    <link href="https://0pluto.github.io/p/374442589.html"/>
    <id>https://0pluto.github.io/p/374442589.html</id>
    <published>2022-04-02T07:09:36.000Z</published>
    <updated>2022-04-23T08:14:33.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><strong>单调栈</strong>就是栈中的元素都是依次递增或者递减的，从而方便我们能维护好数组中一个区间内的<code>最大值</code>或<code>次大值</code>。如：单调递减的栈，则<code>最大值</code>在栈底，<code>次大值</code>在栈底的第二个元素。</p><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">Deque&lt;Integer&gt;stack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line"><span class="comment">// 判断是否为空</span></span><br><span class="line">stack.isEmpty();</span><br><span class="line"><span class="comment">// 压入元素</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">stack.addLast(num);</span><br><span class="line"><span class="comment">// 弹出元素</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> stack.pollLast();</span><br><span class="line"><span class="comment">// 栈顶元素</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> stack.peekLast();</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">关于单调栈的一些题目</summary>
    
    
    
    <category term="LeetCode" scheme="https://0pluto.github.io/categories/LeetCode/"/>
    
    
    <category term="单调栈" scheme="https://0pluto.github.io/tags/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    
  </entry>
  
</feed>
